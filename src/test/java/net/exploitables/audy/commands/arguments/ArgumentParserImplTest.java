package net.exploitables.audy.commands.arguments;

import net.exploitables.audy.internal.ArgsList;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;

import static org.junit.Assert.*;

public class ArgumentParserImplTest {

    static class ArgumentSetTester extends ArgumentSet {
        ArgumentSetTester() {
            super();
            Argument paramArg = new ArgumentBuilder("p", "param", "an argument that wants a parameter")
                    .setHasParameter()
                    .setValueParser(s -> s).build();
            Argument intArg = new ArgumentBuilder("i", "int", "an integer value")
                    .setHasParameter()
                    .setValueParser(Integer::parseInt)
                    .build();

            this.arguments.add(paramArg);
            this.arguments.add(intArg);
            positionalArguments = new ArrayList<>();
            this.positionalArguments.add(new ArgumentPosition(0, paramArg));
        }
    }

    static class ArgumentSetPosTester extends ArgumentSet {
        ArgumentSetPosTester() {
            super();
            Argument argOne = new ArgumentBuilder("o", "one", "the first parameter which wants one term")
                    .setHasParameter()
                    .setValueParser(s -> s).build();
            Argument argTwo = new ArgumentBuilder("t", "two", "the second parameter which wants two terms")
                    .setHasParameter()
                    .setValueParser(s -> s).build();

            this.arguments.add(argOne);
            this.arguments.add(argTwo);
            positionalArguments = new ArrayList<>();
            this.positionalArguments.add(new ArgumentPosition(1, argOne));
            this.positionalArguments.add(new ArgumentPosition(2, argTwo));
        }
    }

    ArgumentSetTester apTest;
    ArgumentSetPosTester apTestPos;

    @Before
    public void setUp() {
        apTest = new ArgumentSetTester();
        apTestPos = new ArgumentSetPosTester();
    }

    @Test
    public void parseArgsEmpty() throws Throwable {
        // Create an args list that would match an example "test" command
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test"));
        // test is our command, advance after it
        argsList.advance();
        // Parse the argsList
        ArgumentParser result = new ArgumentParser(apTest).parseArgs(argsList);

        assertNotNull(result);
    }

    @Test
    public void parseArgsShortOptNoParam() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "-h"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest).parseArgs(argsList);

        assertNotNull(result);
        assertNull(result.castValue("help", String.class).orElse(null));
    }

    @Test
    public void parseArgsShortOptNoParamWithValue() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "-h", "value"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest).parseArgs(argsList);

        assertNotNull(result);
        assertNull(result.castValue("help", String.class).orElse(null));
    }

    @Test
    public void parseArgsShortOptNoParamWithValueError() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "-i", "not_an_int"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest);

        assertThrows(ArgParseException.class, () -> result.parseArgs(argsList));
    }

    @Test
    public void parseArgsShortOptMissingParam() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "-p"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest);

        assertThrows(ArgParseException.class, () -> result.parseArgs(argsList));
    }

    @Test
    public void parseArgsLongOptMissingParam() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "-p"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest);

        assertThrows(ArgParseException.class, () -> result.parseArgs(argsList));
    }

    @Test
    public void parseArgsShortOptWithParam() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "-p", "example", "param"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest).parseArgs(argsList);

        assertEquals("example param", result.castValue("param", String.class).orElse(null));
    }

    @Test
    public void parseArgsLongOptNoParam() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "--help"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest).parseArgs(argsList);

        assertNull(result.castValue("help", String.class).orElse(null));
    }

    @Test
    public void parseArgsLongOptNoParamWithValue() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "--help", "value"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest).parseArgs(argsList);

        assertNull(result.castValue("help", String.class).orElse(null));
    }

    @Test
    public void parseArgsLongOptWithParam() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "--param", "example", "param"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest).parseArgs(argsList);

        assertEquals("example param", result.castValue("param", String.class).orElse("null"));
    }

    @Test
    public void parseArgsLongWithAndWithoutParam1() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "--param", "example", "param", "--help"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest).parseArgs(argsList);

        assertEquals("example param", result.castValue("param", String.class).orElse("null"));
        assertNull(result.castValue("help", String.class).orElse(null));
    }

    @Test
    public void parseArgsLongWithAndWithoutParam2() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "--help", "--param", "example", "param"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTest).parseArgs(argsList);

        assertEquals("example param", result.castValue("param", String.class).orElse("null"));
        assertNull(result.castValue("help", String.class).orElse(null));
    }

    @Test
    public void parsePosArgsEmpty() throws Throwable {
        // Create an args list that would match an example "test" command
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test"));
        // test is our command, advance after it
        argsList.advance();
        // Parse the argsList
        ArgumentParser result = new ArgumentParser(apTestPos).parseArgs(argsList);

        assertNotNull(result);
    }

    @Test
    public void parseArgsPositionalExpected() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "example_one", "example", "two"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTestPos).parseArgs(argsList);

        assertEquals("example_one", result.castValue("one", String.class).orElse("null"));
        assertEquals("example two", result.castValue("two", String.class).orElse("null"));
    }

    @Test
    public void parseArgsPositionalExtra() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "example_one", "example", "two", "extra"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTestPos).parseArgs(argsList);

        assertEquals("example_one", result.castValue("one", String.class).orElse("null"));
        assertEquals("example two", result.castValue("two", String.class).orElse("null"));
    }

    @Test
    public void parseArgsPositionalInsufficient() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "example_one", "example"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTestPos).parseArgs(argsList);

        assertEquals("example_one", result.castValue("one", String.class).orElse("null"));
        assertEquals("example", result.castValue("two", String.class).orElse("null"));
    }

    @Test
    public void parseArgsPositionalMissing() throws Throwable {
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "example_one"));
        argsList.advance();
        ArgumentParser result = new ArgumentParser(apTestPos);

        assertThrows(ArgParseException.class, () -> result.parseArgs(argsList));
    }
}