package net.exploitables.audy.commands.arguments;

import net.exploitables.audy.data.Pair;
import net.exploitables.audy.internal.ArgsList;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class ArgumentParserImplTest {

    static class ArgumentParserImplTester extends ArgumentParserImpl {
        ArgumentParserImplTester() {
            this.arguments.add(new ArgumentBuilder("p", "param", "an argument that wants a parameter").setHasParameter(true).setValueParser(s -> s).build());
        }
    }

    ArgumentParserImplTester apTest;

    @Before
    public void setUp() {
        apTest = new ArgumentParserImplTester();
    }

    @Test
    public void parseArgsEmpty() {
        // Create an args list that would match an example "test" command
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test"));
        // test is our command, advance after it
        argsList.advance();
        // Parse the argsList
        Pair<String, Map<String, Object>> result = apTest.parseArgs(argsList);
        // If the key is null then we did not encounter errors
        assertNull(result.getKey());
    }

    @Test
    public void parseArgsShortOptNoParam() {
        // Create an args list that would match an example "test" command
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "-h"));
        // test is our command, advance after it
        argsList.advance();
        // Parse the argsList
        Pair<String, Map<String, Object>> result = apTest.parseArgs(argsList);
        // If the value for the "h" flag is null then parsing was successful
        assertNull(result.getValue().get("help"));
    }

    @Test
    public void parseArgsShortOptWithParam() {
        // Create an args list that would match an example "test" command
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "-p", "example", "param"));
        // test is our command, advance after it
        argsList.advance();
        // Parse the argsList
        Pair<String, Map<String, Object>> result = apTest.parseArgs(argsList);
        // If the value for the "h" flag is null then parsing was successful
        assertEquals("example param", result.getValue().get("param"));
    }

    @Test
    public void parseArgsLongOptNoParam() {
        // Create an args list that would match an example "test" command
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "--help"));
        // test is our command, advance after it
        argsList.advance();
        // Parse the argsList
        Pair<String, Map<String, Object>> result = apTest.parseArgs(argsList);
        // If the value for the "h" flag is null then parsing was successful
        assertNull(result.getValue().get("help"));
    }

    @Test
    public void parseArgsLongOptWithParam() {
        // Create an args list that would match an example "test" command
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "--param", "example", "param"));
        // test is our command, advance after it
        argsList.advance();
        // Parse the argsList
        Pair<String, Map<String, Object>> result = apTest.parseArgs(argsList);
        // If the value for the "h" flag is null then parsing was successful
        assertEquals("example param", result.getValue().get("param"));
    }

    @Test
    public void parseArgsLongWithAndWithoutParam1() {
        // Create an args list that would match an example "test" command
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "--param", "example", "param", "--help"));
        // test is our command, advance after it
        argsList.advance();
        // Parse the argsList
        Pair<String, Map<String, Object>> result = apTest.parseArgs(argsList);
        // If the value for the "h" flag is null then parsing was successful
        assertEquals("example param", result.getValue().get("param"));
        assertNull(result.getValue().get("help"));
    }

    @Test
    public void parseArgsLongWithAndWithoutParam2() {
        // Create an args list that would match an example "test" command
        ArgsList argsList = new ArgsList(Arrays.asList("a-", "test", "--help", "--param", "example", "param"));
        // test is our command, advance after it
        argsList.advance();
        // Parse the argsList
        Pair<String, Map<String, Object>> result = apTest.parseArgs(argsList);
        // If the value for the "h" flag is null then parsing was successful
        assertEquals("example param", result.getValue().get("param"));
        assertNull(result.getValue().get("help"));
    }
}