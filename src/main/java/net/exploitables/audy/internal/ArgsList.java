/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.internal;

import net.exploitables.audy.AudyMain;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * A basic {@link ArrayList} extension to enhance common access methods used by the bot.
 */
public class ArgsList extends ArrayList<String> implements List<String> {
    private static String whitespaceRegex = "[\\s]+";
    // The bot will not always read the ArgsList in a purely iterative manner
    // Thus it is randomly accessed, and only progresses when progression is ensured
    private int position;

    public ArgsList(Collection<String> collection) {
        super(collection);
        this.position = 1; // Skip the prefix
    }

    public ArgsList(Collection<String> collection, boolean noSkipPrefix) {
        super(collection);
        this.position = 0;
    }

    /**
     * Parse and clean up content from a DiscordMessage received in a Guild Channel
     * - All spaces before/after the first/last words respectively are removed
     * - All tabs and newlines are converted to a space
     * - Multiple consecutive spaces (or tabs/newlines) are turned into one space
     *
     * @param content discord message content
     * @return an ArgsList instance created from the content
     */
    public static ArgsList fromGuildMessageContent(String content, String prefix) {
        // Anywhere there is 1 or more whitespace replace it all with one space
        content = content.replaceAll(whitespaceRegex, " ").trim();
        // Replace the prefix (optionally with the space following as well) with the prefix followed by a space
        content = content.replaceAll(prefix + " *", prefix + " ");
        return new ArgsList(Arrays.asList(content.split(" ")));
    }

    /**
     * Parse and clean up content from a DiscordMessage received in a Private Channel (Direct Message)
     * - All spaces before/after the first/last words respectively are removed
     * - All tabs and newlines are converted to a space
     * - Multiple consecutive spaces (or tabs/newlines) are turned into one space
     *
     * @param content discord message content
     * @return an ArgsList instance created from the content
     */
    public static ArgsList fromPrivateMessageContent(String content) {
        return fromGuildMessageContent(content, AudyMain.getConfiguration().getDefaultPrefix());
    }

    /**
     * @return get the entry at the instance position
     */
    public String getCurrent() {
        if (this.position >= this.size()) return null;
        return this.get(position);
    }

    public String getCurrentAndAdvance() {
        if (this.position >= this.size()) return null;
        this.advance();
        return this.get(position - 1);
    }

    /**
     * Advance the instance position by one
     */
    public void advance() {
        position++;
    }

    /**
     * Return the current instance position value and advance instance position by one
     * @return the entry at the current position
     */
    public String getNext() {
        this.advance();
        return this.getCurrent();
    }

    /**
     * Get the next entry without advancing the current position.
     * @return the next entry from where the current position is
     */
    public String peekNext() {
        return this.get(this.position + 1);
    }

    /**
     * @return true if there is another entry after the current position
     *         which can be accessed with {@link ArgsList#getNext()}
     */
    public boolean hasNext() {
        return this.position < this.size();
    }

    /**
     * Combine the remaining terms starting at the current position into a single string.
     * @return A string with each remaining entry separated by a space.
     */
    public String combineRemaining() {
        return combineNext(remaining());
    }

    /**
     * Combine the next "count" terms into a single string separated by spaces.
     * @param count the amount of terms to combine
     * @return a single string of each term with a space separating them
     */
    public String combineNext(int count) {
        StringBuilder builder = new StringBuilder();
        int totalRemaining = (count == 0) ? remaining() : Math.min(count, remaining());
        for (; totalRemaining > 0; totalRemaining--) {
            builder.append(this.getCurrentAndAdvance());
            // There is another term remaining, don't add an extra space at the end
            if (totalRemaining != 1) {
                builder.append(" ");
            }
        }

        String combined = builder.toString();
        return (combined.equals("")) ? null : combined;
    }

    /**
     * @return the entry before the current position without modifying the position counter
     */
    public String peekPrevious() {
        return this.get(position - 1);
    }

    /**
     * @return the amount of terms remaining including the current position
     */
    public int remaining() {
        return this.size() - position;
    }
}
