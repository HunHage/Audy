/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.internal.tree;

import net.exploitables.audy.data.CommandCategory;
import net.exploitables.audy.data.CommandConfig;

import java.util.*;

public final class CommandTreeNode {
    protected final String key;
    protected final CommandConfig value;

    protected final CommandTreeNode parent;
    public final CommandCategory category;
    private Map<String, CommandTreeNode> children;

    /**
     * Construct a new node with a key, value, and a given parent.
     * @param key node key, what identifies it
     * @param value node value, the value stored by the key
     * @param parent node parent
     */
    protected CommandTreeNode(String key, CommandConfig value, CommandTreeNode parent) {
        this.key = key;
        this.value = value;
        this.parent = parent;
        this.category = CommandCategory.Hidden; // Default to hidden
        this.children = null;
    }

    /**
     * Construct a new node with a key, value, and a given parent.
     * @param key node key, what identifies it
     * @param value node value, the value stored by the key
     * @param parent node parent
     * @param category the category this command should be placed into for the help command
     */
    protected CommandTreeNode(String key, CommandConfig value, CommandTreeNode parent, CommandCategory category) {
        this.key = key;
        this.value = value;
        this.parent = parent;
        this.category = category;
        this.children = null;
    }

    /**
     * Create a child node for this node
     * @param newNodeKey key for the child node
     * @param newNodeValue value for the child node
     * @param category optional category to set for the child node, only used for children of root
     * @return the newly created node
     */
    protected CommandTreeNode addChild(String newNodeKey, CommandConfig newNodeValue, CommandCategory ... category) {
        if (this.children == null) this.children = new HashMap<>();
        CommandTreeNode newNode = (category.length == 0) ?
                new CommandTreeNode(newNodeKey, newNodeValue, this) :
                new CommandTreeNode(newNodeKey, newNodeValue, this, category[0]);
        this.children.put(newNode.key, newNode);
        return newNode;
    }

    /**
     * Search through children for a node which the given key.
     * @param key key for the child node
     * @return a present {@link Optional} if the node is found
     */
    protected Optional<CommandTreeNode> getChildByKey(String key) {
        if (this.children == null || key == null) return Optional.empty();
        return Optional.ofNullable(children.get(key.toLowerCase()));
    }

    /**
     * @return the keys of all child nodes as a set
     */
    public Set<String> getChildKeys() {
        return this.children.keySet();
    }

    /**
     * Create a route to reach this node from it's root.
     * @return a list of node keys starting at the root, and ending with this node's key
     */
    public List<String> getRoute() {
        return createRouteRecursive(new ArrayList<>(), this);
    }

    // Implementation for createRoute
    private List<String> createRouteRecursive(List<String> route, CommandTreeNode node) {
        // The root node's parent will be null
        if (node.parent == null) {
            return route;
        } else {
            route.add(0, node.key);
            return createRouteRecursive(route, node.parent);
        }
    }

    /**
     * Get all immediate children of this node.
     * This is used on the root node to get all top level nodes for the help command.
     * @return a collection of the immediate children of this node
     */
    public Collection<CommandTreeNode> getChildrenValues() {
        return this.children.values();
    }

    public final String getKey()     { return key; }
    public final CommandConfig getValue()   { return value; }
}
