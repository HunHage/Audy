/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.internal;

import discord4j.common.util.Snowflake;
import discord4j.core.event.domain.PresenceUpdateEvent;
import discord4j.core.event.domain.UserUpdateEvent;
import discord4j.core.event.domain.guild.*;
import discord4j.core.event.domain.lifecycle.ReadyEvent;
import discord4j.core.event.domain.message.*;
import discord4j.core.object.entity.*;
import discord4j.core.object.entity.channel.Channel;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.object.reaction.ReactionEmoji;
import discord4j.rest.util.Permission;
import reactor.core.publisher.Mono;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Collectors;

public class DetailedThrowable extends Throwable {
    private Map<String, String> additionalLog;

    public DetailedThrowable(Throwable cause) {
        super(cause);
    }

    public DetailedThrowable(String message) {
        super(message);
        additionalLog = new LinkedHashMap<>();
    }

    public DetailedThrowable(String message, Throwable cause) {
        super(message, cause);
        additionalLog = new LinkedHashMap<>();
    }

    public DetailedThrowable addAdditionalMessage(String key, String value) {
        additionalLog.put(key, value);
        return this;
    }

    public DetailedThrowable addSeparator() {
        additionalLog.put("----------~~~~~~~~~~==========", ":==========~~~~~~~~~~----------");
        return this;
    }

    private DetailedThrowable addObjectName(Object object) {
        this.addAdditionalMessage("Event Classname", object.getClass().getCanonicalName());

        return this;
    }

    /*
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////// Messages for Audy Classes ///////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     */

//    public DetailedThrowable addMessagesForBundle(MessageEventBundle bundle) {
//        this.addObjectName(bundle);
//        this.addAdditionalMessage("Message ID", bundle.getMessage().getId().asString());
//        this.addAdditionalMessage("Message Content", bundle.getMessage().getContent().orElse(""));
//        this.addAdditionalMessage("Channel ID", bundle.getChannel().map(channel -> channel.getId().asString()).orElse(""));
//        this.addAdditionalMessage("Current Args", bundle.getArgs().asString());
//
//        return this;
//    }
//
//    public DetailedThrowable addMessagesForBundle(GuildMessageEventBundle bundle) {
//        // Downcast and add messages for superclass
//        this.addMessagesForBundle((MessageEventBundle) bundle);
//        this.addObjectName(bundle);
//        this.addAdditionalMessage("Guild ID", bundle.getGuild().map(guild -> guild.getId().asString()).orElse(""));
//        this.addAdditionalMessage("Author ID", bundle.getMember().map(member -> member.getId().asString()).orElse(""));
//        // Do NOT attempt to pull Guild/Member/User/Channel-Data (specify a boolean value) as it can throw an exception
//        this.addSeparator();
//        this.addAdditionalMessage("GuildData", bundle.getGuildData(true).map(JsonParser::toJson).orElse(""));
//        this.addSeparator();
//        this.addAdditionalMessage("MemberData", bundle.getMemberData(true).map(JsonParser::toJson).orElse(""));
//        this.addSeparator();
//        this.addAdditionalMessage("UserData", bundle.getUserData(true).map(JsonParser::toJson).orElse(""));
//
//        return this;
//    }
//
//    public DetailedThrowable addMessagesForSCDData(SingleClickDeleteData data) {
//        this.addObjectName(data);
//        this.addAdditionalMessage("Guild ID", data.getReactionMessage().getGuild().map(guild -> guild.getId().asString()).blockOptional().orElse(""));
//        this.addAdditionalMessage("Owner ID", data.getOwnerId().asString());
//        this.addAdditionalMessage("Reaction Message ID", data.getReactionMessage().getId().asString());
//        this.addAdditionalMessage("Channel ID", data.getReactionMessage().getChannelId().asString());
//
//        return this;
//    }

    /*
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////// Logs for Discord Entities ///////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     */

    public DetailedThrowable addEntityLog(Channel channel) {
        this.addObjectName(channel);
        this.addAdditionalMessage("Channel ID", channel.getId().asString());

        return this;
    }

    public DetailedThrowable addEntityLog(GuildChannel channel) {
        this.addObjectName(channel);
        this.addAdditionalMessage("Channel ID", channel.getId().asString() + " - " + channel.getName());

        return this;
    }

    public DetailedThrowable addEntityLog(Guild guild) {
        this.addObjectName(guild);
        this.addAdditionalMessage("Guild ID", guild.getId().asString() + " - " + guild.getName());

        return this;
    }

    public DetailedThrowable addEntityLog(Message message) {
        this.addObjectName(message);
        this.addAdditionalMessage("Guild ID", message.getGuild().map(g -> g.getId().asString()).block());
        this.addAdditionalMessage("Author ID", message.getAuthor().map(user -> user.getId().asString()).orElse(""));
        this.addAdditionalMessage("Message ID", message.getId().asString());
        this.addAdditionalMessage("Channel ID", message.getChannelId().asString());

        this.addAdditionalMessage("Message Content", message.getContent());
        this.addAdditionalMessage("Message Attachments", String.valueOf(message.getAttachments().size()));

        return this;
    }

    public DetailedThrowable addEntityLog(Member member) {
        this.addEntityLog((User) member);
        this.addObjectName(member);
        this.addAdditionalMessage("Display Name", member.getDisplayName());
        this.addAdditionalMessage("Role IDs", member.getRoleIds().stream().map(Snowflake::asString).collect(Collectors.joining(", ")));
        this.addAdditionalMessage("Permissions", member.getBasePermissions().map(p -> p.stream().map(Permission::toString).collect(Collectors.joining(", "))).blockOptional().orElse(""));

        return this;
    }

    public DetailedThrowable addEntityLog(Role role) {
        this.addObjectName(role);
        this.addAdditionalMessage("ID", role.getId() + " - " + role.getName());
        this.addAdditionalMessage("Role Permissions", role.getPermissions().stream().map(Permission::toString).collect(Collectors.joining(", ")));

        return this;
    }

    public DetailedThrowable addEntityLog(User user) {
        this.addObjectName(user);
        this.addAdditionalMessage("ID", user.getId().asString() + " - " + user.getUsername() + "#" + user.getDiscriminator());

        return this;
    }

    /*
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////// Messages for Discord Events /////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     */

    public DetailedThrowable addEventLog(BanEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().asString());
        this.addAdditionalMessage("User ID", event.getUser().getId().asString());

        return this;
    }

    public DetailedThrowable addEventLog(GuildCreateEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuild().getId().asString());

        return this;
    }

    public DetailedThrowable addEventLog(GuildDeleteEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().asString());

        return this;
    }

    public DetailedThrowable addEventLog(GuildUpdateEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getCurrent().getId().asString());

        return this;
    }

    public DetailedThrowable addEventLog(MemberChunkEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().asString());
        this.addAdditionalMessage("Member IDs", event.getMembers().stream().map(member -> member.getId().asString()).collect(Collectors.joining(", ")));

        return this;
    }

    public DetailedThrowable addEventLog(MemberJoinEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().asString());
        this.addAdditionalMessage("Member ID", event.getMember().getId().asString());
        this.addEntityLog(event.getMember());

        return this;
    }

    public DetailedThrowable addEventLog(MemberLeaveEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().asString());
        this.addAdditionalMessage("Member ID", event.getUser().getId().asString());
        this.addEntityLog(event.getUser());

        return this;
    }

    public DetailedThrowable addEventLog(MemberUpdateEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().asString());
        this.addAdditionalMessage("Member ID", event.getMemberId().asString());
        event.getMember().map(this::addEntityLog).blockOptional();

        return this;
    }

    public DetailedThrowable addEventLog(MessageBulkDeleteEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().asString());
        this.addAdditionalMessage("Message IDs", event.getMessageIds().stream().map(Snowflake::asString).collect(Collectors.joining(", ")));

        return this;
    }

    public DetailedThrowable addEventLog(MessageCreateEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuild().map(guild -> guild.getId().asString()).blockOptional().orElse(""));
        this.addAdditionalMessage("Author ID", event.getMessage().getAuthor().map(user -> user.getId().asString()).orElse(""));
        this.addAdditionalMessage("Message ID", event.getMessage().getId().asString());
        this.addAdditionalMessage("Channel ID", event.getMessage().getChannelId().asString());

        return this;
    }

    public DetailedThrowable addEventLog(MessageDeleteEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getMessage().map(Message::getGuild).map(mono -> mono.map(guild -> guild.getId().asString()).block()).orElse(""));
        this.addAdditionalMessage("Author ID", event.getMessage().map(message -> message.getAuthor().map(user -> user.getId().asString()).orElse("")).orElse(""));
        this.addAdditionalMessage("Message ID", event.getMessageId().asString());
        this.addAdditionalMessage("Channel ID", event.getChannelId().asString());

        return this;
    }

    public DetailedThrowable addEventLog(MessageUpdateEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getMessage().flatMap(Message::getGuild).map(guild -> guild.getId().asString()).blockOptional().orElse(""));
        this.addAdditionalMessage("Author ID", event.getMessage().flatMap(message -> Mono.justOrEmpty(message.getAuthor())).map(user -> user.getId().asString()).blockOptional().orElse(""));
        this.addAdditionalMessage("Message ID", event.getMessageId().asString());
        this.addAdditionalMessage("Channel ID", event.getChannelId().asString());

        return this;
    }

    public DetailedThrowable addEventLog(PresenceUpdateEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().asString());
        this.addAdditionalMessage("User ID", event.getUserId().asString());

        return this;
    }

    public DetailedThrowable addEventLog(ReactionAddEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().map(Snowflake::asString).orElse(""));
        this.addAdditionalMessage("User ID", event.getUserId().asString());
        this.addAdditionalMessage("Message ID", event.getMessageId().asString());
        this.addAdditionalMessage("Channel ID", event.getChannelId().asString());
        this.addAdditionalMessage("Custom Emoji", event.getEmoji().asCustomEmoji().map(ReactionEmoji.Custom::toString).orElse(""));
        this.addAdditionalMessage("Unicode Emoji", event.getEmoji().asUnicodeEmoji().map(ReactionEmoji.Unicode::toString).orElse(""));

        return this;
    }

    public DetailedThrowable addEventLog(ReactionRemoveEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild ID", event.getGuildId().map(Snowflake::asString).orElse(""));
        this.addAdditionalMessage("User ID", event.getUserId().asString());
        this.addAdditionalMessage("Message ID", event.getMessageId().asString());
        this.addAdditionalMessage("Channel ID", event.getChannelId().asString());
        this.addAdditionalMessage("Custom Emoji", event.getEmoji().asCustomEmoji().map(ReactionEmoji.Custom::toString).orElse(""));
        this.addAdditionalMessage("Unicode Emoji", event.getEmoji().asUnicodeEmoji().map(ReactionEmoji.Unicode::toString).orElse(""));

        return this;
    }

    public DetailedThrowable addEventLog(ReadyEvent event) {
        this.addObjectName(event);
        this.addAdditionalMessage("Guild IDs", event.getGuilds().stream().map(ReadyEvent.Guild::getId).map(Snowflake::asString).collect(Collectors.joining(", ")));

        return this;
    }

    public DetailedThrowable addEventLog(UserUpdateEvent event) {
        this.addObjectName(event);
        this.addEntityLog(event.getCurrent());

        return this;
    }

    public Map<String, String> getAdditionalLog() { return additionalLog; }
}
