/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy;

import net.exploitables.audy.internal.ThrowableReport;
import net.exploitables.audy.scheduler.ArchivedFileDeleteJob;
import net.exploitables.audy.scheduler.ArchivedMessageDeleteJob;
import net.exploitables.audy.scheduler.ArchivedUserDeleteJob;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.impl.StdSchedulerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Properties;

public class AudyScheduler {
    private static final Logger logger = LoggerFactory.getLogger(AudyScheduler.class);

    private static Scheduler ramScheduler;
    private static Scheduler sqlRemindScheduler;

    /**
     * Called during application startup to setup schedulers, this does *not* start them as jobs may require
     *  Discord API access and this is not intended to be called after login when the gateway is open.
     */
    static void setupSchedulers() {
        logger.info("Setting up schedulers ...");
        try {
            ramScheduler = StdSchedulerFactory.getDefaultScheduler();
            setupRamJobs();

            if (AudyMain.getConfiguration().isSqlEnabled()) {
                StdSchedulerFactory sf = new StdSchedulerFactory(createSqlSchedulerProperties());
                sqlRemindScheduler = sf.getScheduler();
            }

            logger.info("Schedulers setup.");
        } catch (SchedulerException se) {
            new ThrowableReport(se).reportInternalException().block();
            System.exit(-1);
        }
    }

    /**
     * Startup schedulers, this should be called AFTER opening the Discord gateway as jobs will utilize it.
     * @return true if startup succeeded, false if an exception was encountered.
     */
    static boolean startSchedulers() {
        logger.info("Starting schedulers ...");
        try {
            ramScheduler.start();
            if (AudyMain.getConfiguration().isSqlEnabled()) { sqlRemindScheduler.start(); }
            logger.info("Schedulers started.");
            return true;
        } catch (SchedulerException se) {
            new ThrowableReport(se).reportInternalException();
            return false;
        }
    }

    /**
     * Shutdown schedulers, this should be called BEFORE closing the Discord gateway as jobs within the next
     *  half hour will be executed so they are not missed.
     *
     * Down the line the amount of time to execute ahead should be increased.
     * @param minutesAhead the amount of minutes ahead to execute jobs in order to not miss them during downtime
     */
    static void stopSchedulers(int minutesAhead) {
        logger.info("Stopping schedulers (and waiting for current jobs to complete) ...");
        try {
            ramScheduler.shutdown(true);
            if (AudyMain.getConfiguration().isSqlEnabled()) { sqlRemindScheduler.shutdown(true); }
            logger.info("Schedulers stopped.");
        } catch (SchedulerException se) {
            new ThrowableReport(se).reportInternalException().block();
        }
    }

    /**
     * Setup and register static RAM jobs.
     */
    private static void setupRamJobs() {
        try {
            if (AudyMain.getConfiguration().isSqlEnabled()) {
                ArchivedMessageDeleteJob.scheduleJobs(ramScheduler);
                ArchivedUserDeleteJob.scheduleJobs(ramScheduler);
                ArchivedFileDeleteJob.scheduleJobs(ramScheduler);
            }
        } catch (SchedulerException se) {
            new ThrowableReport(se).reportInternalException().block();
        }
    }

    /**
     * Create the properties for the Reminder Scheduler to connect to the SQL database for job storage.
     * @return a configuration to initialize the Reminder Scheduler
     */
    private static Properties createSqlSchedulerProperties() {
        Properties p = new Properties();

        // Identification
        p.put("org.quartz.scheduler.instanceName",              "QuartzSqlRemindScheduler");
        p.put("org.quartz.scheduler.instanceId",                "AUTO");
        // Thread Pool
        p.put("org.quartz.threadPool.class",                    "org.quartz.simpl.SimpleThreadPool");
        p.put("org.quartz.threadPool.threadCount",              "3");
        // Data Source, this identifies the AudyDatabaseConnectionProvider class as
        p.put("org.quartz.dataSource.AudySqlDataSource.connectionProvider.class",
                "net.exploitables.audy.scheduler.AudyDatabaseConnectionProvider");
        // Connection to SQL
        p.put("org.quartz.jobStore.class",                      "org.quartz.impl.jdbcjobstore.JobStoreTX");
        p.put("org.quartz.jobStore.driverDelegateClass",        "org.quartz.impl.jdbcjobstore.PostgreSQLDelegate");
        p.put("org.quartz.jobStore.dataSource",                 "AudySqlDataSource");
        p.put("org.quartz.jobStore.tablePrefix",                "tbl_qtz_rmd_");
        return p;
    }

    public static Scheduler getSqlRemindScheduler() { return sqlRemindScheduler; }
}
