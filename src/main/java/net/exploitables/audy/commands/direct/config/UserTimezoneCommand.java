/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.direct.config;

import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.commands.MessageBundle;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.data.DiscordPermission;
import net.exploitables.audy.utilities.TimeFormatter;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import reactor.core.publisher.Mono;

import java.util.Set;

/**
 * Change the guild's prefix. Requires the member to have administrator permissions on the server.
 */
public class UserTimezoneCommand {
    private static UserTimezoneCommand singleton;
    private CommandConfig commandConfig;

    private UserTimezoneCommand() {
        this.commandConfig = new CommandConfigBuilder(this::execute, UserTimezoneCommand.class)
            .addHelp("Set TimeZone: `config timezone <new timezone>",
                "Set the timezone you would like Audy to use when displaying times to you **in your private " +
                "messages**. Audy will not use this setting on public servers and will use UTC instead. You must " +
                "specify a TimeZone by its __Case Sensitive__ Canonical ID " +
                "(listed here)[https://www.joda.org/joda-time/timezones.html].\n\n" +
                "For example, if you lived on the East Coast of the USA you would enter in `America/New_York` for " +
                "your timezone. If you want to remove your TimeZone then simply don't provide one.")
            .addMemberPermission(DiscordPermission.ADMINISTRATOR)
            .build();
    }

    public static UserTimezoneCommand get() {
        if (singleton == null) singleton = new UserTimezoneCommand();
        return singleton;
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }

    /**
     * Change the Guild prefix to one specified by the calling user.
     *
     * @param bundle bundle created from a command issued within a guild
     * @return an empty mono when execution is complete
     */
    public Mono<Void> execute(MessageBundle bundle) {
        String term = bundle.getArgs().combineRemaining();

        // No term provided, clear timezone
        if (term.isEmpty()) {
            bundle.getUserConfig().setTimeZone(null).save().block();
            bundle.getResponse().setState(CommandState.SUCCESS)
                .setContentTitle("Your timezone has been cleared, all times shown to you will be in UTC again.");
            return Mono.empty();

        // TimeZone provided, validate it
        } else {
            try {
                DateTimeZone dtz = DateTimeZone.forID(term);
                bundle.getUserConfig().setTimeZone(dtz.getID()).save().block();
                bundle.getResponse().setState(CommandState.SUCCESS)
                    .setContentTitle("Your timezone has been set to `" + dtz.toString() + "`, by my time your " +
                        "clock should be around `" + TimeFormatter.format(DateTime.now().withZone(dtz)) + "`");
            } catch (IllegalArgumentException iae) {
                bundle.getResponse().setState(CommandState.FAILED_EXPECTED)
                    .setContentTitle("Please make sure you typed the Canonical ID correctly and that it is CaSe sEnSiTiVe!")
                    .setContentDescription("```Reason Given: " + iae.getMessage() + "```");
                return Mono.empty();
            }

            Set<String> zones = DateTimeZone.getAvailableIDs();
        }

        return Mono.empty();
    }
}
