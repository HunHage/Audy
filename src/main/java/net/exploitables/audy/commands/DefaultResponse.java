/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands;

import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.data.bundles.MessageEventBundle;
import net.exploitables.audy.internal.tree.CommandTreeNode;
import reactor.core.publisher.Mono;

import java.util.List;

/**
 * The default command class for the CommandTree, sends back help when it is called.
 */
public class DefaultResponse {
    private static DefaultResponse singleton;

    // Command Configuration and reference to the command method.
    private CommandConfig commandConfig;

    /**
     * Create a new "Common" command and configure it.
     */
    private DefaultResponse() {
        this.commandConfig = new CommandConfigBuilder(this::defaultCommand, DefaultResponse.class).build();
    }

    public static DefaultResponse get() {
        if (singleton == null) singleton = new DefaultResponse();
        return singleton;
    }

    /**
     * Called by default within the command tree when no command exists for a node.
     * This happens when a command is referenced, but it's sub-command needs to be called instead,
     *  or the (sub-)command referenced doesn't exist.
     * This will respond with the known specified
     * @return  an empty Mono when execution is complete
     */
    public <B extends MessageEventBundle> Mono<Void> defaultCommand(B bundle) {
        CommandTreeNode lastFoundNode = bundle.getCommandNode();
        List<String> route = lastFoundNode.getRoute();

        // If the route has no entries then only the prefix was said or recognized
        if (route.size() == 0) {
            // No further arguments provided, return general help message
            if (bundle.getArgs().remaining() == 0) {
                // FUTURE: Guild Prefix
                bundle.getResponse()
                    .setContent("Hello " + bundle.getAuthor().getUsername() + "! You can say `prefix help` to see a " +
                            "list of commands.")
                    .setState(CommandState.SUCCESS);
            // Further argument found, respond with a help message
            } else {
                // FUTURE: Guild Prefix
                bundle.getResponse()
                    .setContent("No commands found for `" + bundle.getArgs().current() + "`, you can say `prefix " +
                            "help` to see a list of commands.")
                    .setState(CommandState.FAILED_EXPECTED);
            }
        // Route exists, at least one command was specified, which means the number of children in the tree is small-ish
        } else {
            // Add the prefix as it is omitted
            // FUTURE: Guild Prefix
            route.add(0, "prefix");
            route.add("?");
            bundle.getResponse()
                .updateEmbed(embed -> {
                    embed.setTitle("Please select a valid sub-command for `" + (bundle.getArgs().peekPrevious() + "`"));
                    embed.setDescription("`" + String.join(" -> ", route) + "`");
                    embed.addField("Possible sub-commands:" ,
                        // This will error with an NPE if the specified node has no child nodes
                        // This error will not be fixed as it is thrown when the tree is setup improperly
                        lastFoundNode.getChildKeys().toString(),
                        false);
                    })
                .setState(CommandState.FAILED_EXPECTED);
        }

        return Mono.empty();
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }
}
