/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.guild.info;

import discord4j.core.object.entity.channel.Category;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.object.entity.channel.VoiceChannel;
import discord4j.core.spec.EmbedCreateSpec;
import discord4j.rest.util.Permission;
import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.commands.MessageBundle;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.utilities.CodeBlock;
import net.exploitables.audy.utilities.EntitySearch;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.function.Consumer;

/**
 * A command to show a small card of information pertaining to a channel.
 */
public class InfoChannelCommand extends InfoSuperCommand {
    private static InfoChannelCommand singleton;
    private CommandConfig commandConfig;

    private InfoChannelCommand() {
        this.commandConfig = new CommandConfigBuilder(this::execute, this.getClass())
            .addHelp("Show Channel Info: `%p info channel <channel>`",
                "Display information about the specified channel. The channel can be specified by the " +
                    "following:\n" +
                    "- Exact Channel Name\n" +
                    "- Channel Snowflake ID\n" +
                    "- Unique Start of Channel Name")
            .build();
    }

    public static InfoChannelCommand get() {
        if (singleton == null) singleton = new InfoChannelCommand();
        return singleton;
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }

    /**
     * Search for channels within the guild by the term provided.
     *
     * @param bundle bundle created from a command issued within a guild
     * @return an empty mono when execution is complete
     */
    public Mono<Void> execute(MessageBundle bundle) {
        String term = bundle.getArgs().combineRemaining();
        List<GuildChannel> channels = EntitySearch.searchGuildChannelsByTerm(bundle.getGuild().getChannels().collectList().block(), term);

        // Found our match, generate embed and return
        if (channels.size() == 1) {
            GuildChannel channel = channels.get(0);
            boolean hasViewPermissions = channel
                .getEffectivePermissions(bundle.getAuthor().getId())
                .map(perms -> perms.contains(Permission.VIEW_CHANNEL))
                .blockOptional()
                .orElse(false);

            // I don't think it's the *cleanest* to simple act as if the channel doesn't exist, but simply confirming
            //  that it does ...
            if (hasViewPermissions) {
                bundle.getResponse().updateEmbed(createEmbed(channel));
                bundle.getResponse().setState(CommandState.SUCCESS);
                return Mono.empty();
            }
        }

        // 0 or 2+ channels found
        super.generateBadResultsMessage(bundle, term, "channel", channels, GuildChannel::getName);
        return Mono.empty();
    }

    /**
     * Create an embed for a channel
     * @param channel the channel to create the embed for
     * @return a fully built embed for the channel
     */
    private Consumer<EmbedCreateSpec> createEmbed(GuildChannel channel) {
        return (embed) -> {
            // Set the title to their full username + discriminator and show their ID
            embed.setTitle(channel.getName() + "  `ID:" + channel.getId().asString() + "`");

            // Add creation date
            embed.setDescription(super.generateAgeDescription(channel.getId()));

            // Silent mention of the channel
            embed.addField("Silent Mention",
                channel.getMention(),
                true);

            // Type of channel
            embed.addField("Channel Type",
                "```" + channel.getType().toString() + "```",
                true);

            // Channel specific information
            CodeBlock details = new CodeBlock().setAlignment("RIGHT");
            switch (channel.getType()) {
                case GUILD_TEXT:
                case GUILD_NEWS:
                    int pinned = Mono.just(channel).ofType(MessageChannel.class)
                        .flatMapMany(MessageChannel::getPinnedMessages)
                        .collectList()
                        .map(List::size)
                        .blockOptional()
                        .orElse(-1);
                    details.append("Pins: ").append(pinned).append("/50");
                    break;
                case GUILD_VOICE:
                    Mono.just(channel).ofType(VoiceChannel.class)
                        .doOnSuccess(vChannel -> {
                            details.append("   Bitrate: ").append(vChannel.getBitrate()).newLine();
                            details.append("User Limit: ").append(vChannel.getUserLimit()); })
                        .block();
                    break;
                case GUILD_CATEGORY:
                    int childChannels = Mono.just(channel).ofType(Category.class)
                        .flatMapMany(Category::getChannels)
                        .collectList()
                        .map(List::size)
                        .blockOptional()
                        .orElse(-1);
                    details.append("Channels: ").append(childChannels);
                    break;
            }

            embed.addField("Channel Details", details.toString(), false);
        };
    }
}
