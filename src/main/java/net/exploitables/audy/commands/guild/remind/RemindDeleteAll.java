/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.guild.remind;

import net.exploitables.audy.AudyScheduler;
import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.commands.MessageBundle;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.utilities.CodeBlock;
import net.exploitables.audy.utilities.ListFormatter;
import org.quartz.JobKey;
import org.quartz.SchedulerException;
import org.quartz.impl.matchers.GroupMatcher;
import org.quartz.utils.Key;
import reactor.core.publisher.Mono;

import java.util.Set;

public class RemindDeleteAll extends RemindSuperCommand {
    private static RemindDeleteAll singleton;

    private CommandConfig commandConfig;

    private RemindDeleteAll() {
        this.commandConfig = new CommandConfigBuilder(this::deleteAll, this.getClass()).build();
    }

    public static RemindDeleteAll get() {
        if (singleton == null) singleton = new RemindDeleteAll();
        return singleton;
    }

    public Mono<Void> deleteAll(MessageBundle bundle) {
        try {
            String group = createGroupForUser(bundle);
            Set<JobKey> jobKeys = AudyScheduler.getSqlRemindScheduler().getJobKeys(GroupMatcher.groupContains(group));

            if (bundle.getArgs().remaining() > 0) {
                bundle.getResponse().setState(CommandState.SUCCESS);
                bundle.getResponse().setContentTitle("You have `" + jobKeys.size() + "` current reminders.");
                bundle.getResponse().setContentDescription(new CodeBlock().append(ListFormatter.collectionToString(jobKeys, Key::getName, 99, "none", "\n")).toString());
            } else {
                for (JobKey jobKey : jobKeys) {
                    AudyScheduler.getSqlRemindScheduler().deleteJob(jobKey);
                }
                bundle.getResponse().setState(CommandState.SUCCESS);
                bundle.getResponse().setContentTitle("Deleted `" + jobKeys.size() + "` reminders.");
            }
        } catch (SchedulerException se) {
            bundle.getResponse().setThrowable(se);
        }

        return Mono.empty();
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }
}
