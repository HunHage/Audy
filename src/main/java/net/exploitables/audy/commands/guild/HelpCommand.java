/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.guild;

import net.exploitables.audy.AudyClient;
import net.exploitables.audy.AudyMain;
import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.data.Pair;
import net.exploitables.audy.data.bundles.GuildMessageEventBundle;
import net.exploitables.audy.internal.EnumFormattedName;
import net.exploitables.audy.internal.tree.CommandTreeNode;
import net.exploitables.audy.subscribers.CommandListener;
import net.exploitables.audy.utilities.ListFormatter;
import reactor.core.publisher.Mono;

import java.util.List;

/**
 * A command to show a small card of information pertaining to a channel.
 */
public class HelpCommand {
    private static HelpCommand singleton;
    private CommandConfig commandConfig;

    private HelpCommand() {
        this.commandConfig = new CommandConfigBuilder(this::execute, this.getClass()).build();
    }

    public static HelpCommand get() {
        if (singleton == null) singleton = new HelpCommand();
        return singleton;
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }

    /**
     * Provide general help for the given command based on the contents of it's CommandConfig.
     *
     * @param bundle bundle created from a command issued within a guild
     * @return an empty mono when execution is complete
     */
    public Mono<Void> execute(GuildMessageEventBundle bundle) {
        // We can just search for a node again after the ArgsList was parsed to find this help command.
        CommandTreeNode node = CommandListener.get().getCommandTreeNode(bundle.getArgs());
        String prefix = CommandListener.get().getGuildPrefix(bundle.getGuild().getId().asLong());
        List<String> route = node.getRoute();

        // No command was found
        if (node.getValue().getCommandClass().isAssignableFrom(DefaultResponse.class)) {
            if (route.size() == 0) {
                bundle.getResponse().setContentTitle("Please specify the command you'd like help for. ex: `" + prefix +
                    " help config guild prefix`");
                bundle.getResponse().setState(CommandState.FAILED_EXPECTED);
            } else {
                // Add the prefix as it is omitted
                bundle.getResponse()
                    .updateEmbed(embed -> {
                        embed.setTitle("Please specify one of these sub commands for help with the " + node.getKey() + " command:");
                        embed.setDescription(ListFormatter.collectionToString(node.getChildKeys(), string -> "`" + string + "`", 99, "", ", "));
                        embed.setFooter(AudyMain.getVersion(), null);
                    })
                    .setState(CommandState.FAILED_EXPECTED);
            }
        // Found a command, get its config and print help information
        } else {
            bundle.getResponse().updateEmbed(embed -> {
                embed.setTitle("Command: `" + prefix + " " + String.join(" ", route) + "`");
                // Add help fields
                for (Pair<String, String> pair : node.getValue().getHelpFields()) {
                    embed.addField(pair.getKey().replaceAll("%p", prefix), pair.getValue().replaceAll("%p", prefix), false);
                }
                // Add required permissions
                embed.addField("Required " + AudyClient.getClient().getSelfUsername() + " permissions:",
                    "```" + ListFormatter.collectionToString(node.getValue().getBotPermissions(), EnumFormattedName::getFormattedName, 99, "none", "\n") + "```",
                    true);
                embed.addField("Required user permissions:",
                    "```" + ListFormatter.collectionToString(node.getValue().getMemberPermissions(), EnumFormattedName::getFormattedName, 99, "none", "\n") + "```",
                    true);
                embed.setFooter(AudyMain.getVersion(), null);
            });
            bundle.getResponse().setState(CommandState.SUCCESS);
        }

        return Mono.empty();
    }
}
