/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.guild.info;

import discord4j.core.object.entity.Role;
import discord4j.core.spec.EmbedCreateSpec;
import discord4j.rest.util.Color;
import net.exploitables.audy.AudyMain;
import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.data.bundles.GuildMessageEventBundle;
import net.exploitables.audy.utilities.EntitySearch;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.function.Consumer;

/**
 * A command to show a small card of information pertaining to a role.
 */
public class InfoRoleCommand extends InfoSuperCommand {
    private static InfoRoleCommand singleton;
    private CommandConfig commandConfig;

    private InfoRoleCommand() {
        this.commandConfig = new CommandConfigBuilder(this::execute, this.getClass()).build();
    }

    public static InfoRoleCommand get() {
        if (singleton == null) singleton = new InfoRoleCommand();
        return singleton;
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }

    /**
     * Search for roles within the guild by the term provided.
     *
     * @param bundle bundle created from a command issued within a guild
     * @return an empty mono when execution is complete
     */
    public Mono<Void> execute(GuildMessageEventBundle bundle) {
        String term = bundle.getArgs().combineRemaining();
        List<Role> roles = EntitySearch.searchRolesByTerm(bundle.getGuild().getRoles().collectList().block(), term);

        // Found our match, generate embed and return
        if (roles.size() == 1) {
            Role role = roles.get(0);
            bundle.getResponse().updateEmbed(createEmbed(role));
            bundle.getResponse().setState(CommandState.SUCCESS);
            return Mono.empty();
        }

        // 0 or 2+ roles found
        super.generateBadResultsMessage(bundle, term, "role", roles, Role::getName);
        return Mono.empty();
    }

    /**
     * Create an embed for a role
     * @param role the role to create the embed for
     * @return a fully built embed for the role
     */
    private Consumer<EmbedCreateSpec> createEmbed(Role role) {
        return (embed) -> {
            // Set the title to their full username + discriminator and show their ID
            embed.setTitle(role.getName() + "  `ID:" + role.getId().asString() + "`");

            // Add creation date
            embed.setDescription(super.generateAgeDescription(role.getId()));

            // Set color of the embed to the role color if present, else default to dark grey
            Mono.just(role.getColor())
                .filter(color -> !color.equals(Color.BLACK))
                .switchIfEmpty(Mono.just(Color.of(AudyMain.getConfiguration().getNoEmbedColor())))
                .map(embed::setColor)
                .block();

            // Silent mention of the role
            embed.addField("Silent Mention",
                role.getMention(),
                true);

            // Number of users with the role
            int userCount = role.getGuild()
                .flatMapMany(Guild::getMembers)
                .filter(m -> m.getRoleIds()
                    .contains(role.getId()))
                .collectList().map(List::size)
                .blockOptional().orElse(-1);
            embed.addField("Member Count",
                "```" + userCount + "```",
                true);

            // Role Color
            embed.addField("Color",
                "```#" + Integer.toString(role.getColor().getRGB(), 16).toUpperCase() + "```",
                true);
        };
    }
}
