/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.guild.info;

import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.Role;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.spec.EmbedCreateSpec;
import discord4j.rest.util.Color;
import discord4j.rest.util.Image;
import discord4j.rest.util.Permission;
import net.exploitables.audy.AudyMain;
import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.commands.MessageBundle;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.utilities.CodeBlock;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

/**
 * A command to show a small card of information pertaining to a user. The information shown is not private/sensitive.
 */
public class InfoGuildCommand extends InfoSuperCommand {
    private static InfoGuildCommand singleton;
    private CommandConfig commandConfig;

    private InfoGuildCommand() {
        this.commandConfig = new CommandConfigBuilder(this::execute, this.getClass())
            .addHelp("Show Guild Info: `%p info guild`",
                "Display information about this guild, including member/channel counts, creation date, " +
                    "and the icon.")
            .build();
    }

    public static InfoGuildCommand get() {
        if (singleton == null) singleton = new InfoGuildCommand();
        return singleton;
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }

    /**
     * Generate info about the guild and display it. All information is non-sensitive
     *
     * @param bundle bundle created from a command issued within a guild
     * @return an empty mono when execution is complete
     */
    public Mono<Void> execute(MessageBundle bundle) {
        bundle.getResponse().updateEmbed(createEmbed(bundle));
        bundle.getResponse().setState(CommandState.SUCCESS);

        return Mono.empty();
    }

    /**
     * Create an embed showing guild information
     * @param bundle bundle created from a command issued within a guild
     * @return a completely built embed for the guild
     */
    private Consumer<EmbedCreateSpec> createEmbed(MessageBundle bundle) {
        return (embed) -> {
            //noinspection OptionalGetWithoutIsPresent
            Guild guild = bundle.getGuild().get();
            // Set default Color
            // FUTURE: Pick Dominant Color
            embed.setColor(Color.of(AudyMain.getConfiguration().getEmbedColor()));

            // Set the thumbnail to the servers icon
            // This is not ideal, no animation support and not always working.
            // No solution yet as as the icon needs to be downloaded to detect if the icon format is valid.
            guild.getIconUrl(Image.Format.PNG).ifPresent(embed::setThumbnail);

            // Set the title to the guild name + id
            embed.setTitle(guild.getName() + "  `ID:" + guild.getId().asString() + "`");

            // Set the description to the guild creation date/age
            embed.setDescription(super.generateAgeDescription(guild.getId()));

            // User and Bot Count
            int users = 0;
            int bots = 0;
            for (Member member : guild.getMembers().collectList().blockOptional().orElse(new ArrayList<>())) {
                if (member.isBot()) { bots++; }
                else { users++; }
            }
            int longestNumber = (int) (Math.log10(users + bots) + 1);
            CodeBlock memberCount = new CodeBlock().setAlignment("RIGHT")
                    .setW(longestNumber).append(users).append(" Users").newLine()
                    .setW(longestNumber).append(bots).append(" Bots").newLine()
                    .setFill('-').setW(longestNumber + 6).append("").setFill(' ').newLine()
                    .setW(longestNumber).append(users + bots).append(" Total");
            embed.addField("Member Count",
                    memberCount.toString(),
                    true);

            // Various stats to fill space for appearance
            CodeBlock serverStats = new CodeBlock().setAlignment("RIGHT")
                    .setW(11).append("MFA Lv: ").append(guild.getMfaLevel().getValue()).newLine()
                    .setW(11).append("Verify Lv: ").append(guild.getVerificationLevel().getValue()).newLine()
                    .setW(11).append("Filter Lv: ").append(guild.getContentFilterLevel().getValue()).newLine()
                    .setW(11).append("Emojis: ").append(guild.getEmojis()
                            .collectList().map(List::size).blockOptional().orElse(-1)).newLine();
            embed.addField("Server Details",
                    serverStats.toString(),
                    true);

            // Boost info, also acts as a separator
            Integer boosterCount = guild.getMembers()
                    .flatMap(member -> Mono.justOrEmpty(member.getPremiumTime()))
                    .collectList()
                    .map(List::size)
                    .blockOptional()
                    .orElse(0);
            CodeBlock serverBoostStats = new CodeBlock()
                    .append(boosterCount)
                    .append(" Members contributing ")
                    .append(guild.getPremiumSubscriptionCount().orElse(-1))
                    .append(" Boosts to reach Tier ")
                    .append(guild.getPremiumTier().getValue());
            embed.addField("Server Boost Details",
                    serverBoostStats.toString(),
                    false);

            // Channel and category count
            // For privacy reasons, only channels that the calling user can see are counted
            int channels = 0;
            int categories = 0;
            for (GuildChannel channel : guild.getChannels().collectList().blockOptional().orElse(new ArrayList<>())) {
                boolean hasViewPermissions = channel
                    .getEffectivePermissions(bundle.getAuthor().getId())
                    .map(perms -> perms.contains(Permission.VIEW_CHANNEL))
                    .blockOptional()
                    .orElse(false);

                if (!hasViewPermissions) { continue; }
                switch (channel.getType()) {
                    case GUILD_TEXT:
                    case GUILD_VOICE:
                    case GUILD_STORE:
                        channels++;
                        break;
                    case GUILD_CATEGORY:
                        categories++;
                        break;
                }
            }
            longestNumber = (int) (Math.log10(channels + categories) + 1);
            CodeBlock channelCount = new CodeBlock().setAlignment("RIGHT")
                .setW(longestNumber).append(channels).append(" Channels").newLine()
                .setW(longestNumber).append(categories).append(" Categories").newLine()
                .setFill('-').setW(longestNumber + 11).append("").setFill(' ').newLine()
                .setW(longestNumber).append(channels + categories).append(" Total");
            embed.addField("Channel Count",
                channelCount.toString(),
                true);

            // Role Count
            int normal = 0;
            int managed = 0;
            for (Role role : guild.getRoles().collectList().blockOptional().orElse(new ArrayList<>())) {
                if (role.isManaged()) {
                    managed++;
                } else {
                    normal++;
                }
            }
            longestNumber = (int) (Math.log10(channels + categories) + 1);
            CodeBlock roleCount = new CodeBlock().setAlignment("RIGHT")
                    .setW(longestNumber).append(normal).append(" Normal").newLine()
                    .setW(longestNumber).append(managed).append(" Managed").newLine()
                    .setFill('-').setW(longestNumber + 8).append("").setFill(' ').newLine()
                    .setW(longestNumber).append(normal + managed).append(" Total");
            embed.addField("Role Count",
                    roleCount.toString(),
                    true);
        };
    }
}
