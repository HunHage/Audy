/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.guild.info;

import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.spec.EmbedCreateSpec;
import discord4j.rest.util.Color;
import discord4j.rest.util.Image;
import discord4j.rest.util.Permission;
import net.exploitables.audy.AudyMain;
import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.commands.DefaultResponse;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.data.bundles.GuildMessageEventBundle;
import net.exploitables.audy.utilities.CodeBlock;
import net.exploitables.audy.utilities.TimeFormatter;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.function.Consumer;

/**
 * A command to show a small card of information pertaining to a user. The information shown is not private/sensitive.
 */
public class InfoGuildCommand {
    private static InfoGuildCommand singleton;
    private CommandConfig commandConfig;

    private InfoGuildCommand() {
        this.commandConfig = new CommandConfigBuilder(this::execute, DefaultResponse.class).build();
    }

    public static InfoGuildCommand get() {
        if (singleton == null) singleton = new InfoGuildCommand();
        return singleton;
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }

    /**
     * Generate info about the guild and display it. All information is non-sensitive
     *
     * @param bundle bundle created from a command issued within a guild
     * @return an empty mono when execution is complete
     */
    public Mono<Void> execute(GuildMessageEventBundle bundle) {
        bundle.getResponse().updateEmbed(createEmbed(bundle));
        bundle.getResponse().setState(CommandState.SUCCESS);

        return Mono.empty();
    }

    /**
     * Create an embed showing guild information
     * @param bundle bundle created from a command issued within a guild
     * @return a completely built embed for the guild
     */
    private Consumer<EmbedCreateSpec> createEmbed(GuildMessageEventBundle bundle) {
        return (embed) -> {
            Guild guild = bundle.getGuild();
            // Set default Color
            // FUTURE: Pick Dominant Color
            embed.setColor(Color.of(AudyMain.getConfiguration().getEmbedColor()));

            // Set the thumbnail to the servers icon
            // Try for the animated icon, if that fails fall back to a png, fails again then just don't set it
            Mono.justOrEmpty(guild.getIconUrl(Image.Format.GIF))
                .switchIfEmpty(Mono.justOrEmpty(guild.getIconUrl(Image.Format.PNG)))
                .map(embed::setThumbnail);

            // Set the title to the guild name + id
            embed.setTitle(guild.getName() + "  `ID:" + guild.getId().asString() + "`");

            // Set the description to the guild creation date/age
            CodeBlock body = new CodeBlock();
            body.append("Created: ").append(TimeFormatter.formatUTC(guild.getId())).newLine()
                .append("         ").append(TimeFormatter.formatAge(guild.getId().getTimestamp()));
            embed.setDescription(body.toString());

            // User and Bot Count
            int users = 0;
            int bots = 0;
            for (Member member : guild.getMembers().collectList().blockOptional().orElse(new ArrayList<>())) {
                if (member.isBot()) { bots++; }
                else { users++; }
            }
            embed.addField("Member Count",
                "```" + users + " Users + " + bots + " Bots = " + (users + bots) + "```",
                true);

            // Channel and category count
            // For privacy reasons, only channels that the calling user can see are counted
            int channels = 0;
            int categories = 0;
            for (GuildChannel channel : guild.getChannels().collectList().blockOptional().orElse(new ArrayList<>())) {
                boolean hasViewPermissions = channel
                    .getEffectivePermissions(bundle.getAuthor().getId())
                    .map(perms -> perms.contains(Permission.VIEW_CHANNEL))
                    .blockOptional()
                    .orElse(false);

                if (!hasViewPermissions) { continue; }
                switch (channel.getType()) {
                    case GUILD_TEXT:
                    case GUILD_VOICE:
                        channels++;
                        break;
                    case GUILD_CATEGORY:
                        categories++;
                        break;
                }
            }
            embed.addField("Channel Count",
                "```" + channels + " Channels + " + categories + " Categories = " + (channels + categories) + "```",
                true);

            // Role Count
            embed.addField("Role Count",
                "```" + guild.getRoleIds().size() + "```",
                true);
        };
    }
}
