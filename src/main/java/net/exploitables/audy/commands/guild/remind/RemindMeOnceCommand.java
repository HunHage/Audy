/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.guild.remind;

import discord4j.core.object.entity.Message;
import net.exploitables.audy.AudyScheduler;
import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.data.bundles.GuildMessageEventBundle;
import net.exploitables.audy.utilities.TimeFormatter;
import org.quartz.JobDataMap;
import org.quartz.JobKey;
import org.quartz.SchedulerException;
import org.quartz.impl.matchers.GroupMatcher;
import reactor.core.publisher.Mono;

import java.time.Duration;
import java.time.Instant;
import java.util.Set;

public class RemindMeOnceCommand extends RemindSuperCommand {
    private static RemindMeOnceCommand singleton;

    // Command Configuration and reference to the command method.
    private CommandConfig commandConfig;

    /**
     * Create a new "TestCommand" command and configure it.
     */
    private RemindMeOnceCommand() {
        this.commandConfig = new CommandConfigBuilder(this::remindMeCommand, this.getClass())
            .addHelp("Description",
                "Setup a reminder that will be sent as a direct message to you a single time with a link to where " +
                "this command was called.")
            .addHelp("%p remind me <time> [message]",
                "Get a link to where this command is used after the specified amount of time has passed. If a " +
                "message is supplied then it will be attached with the reminder.")
            .addHelp("Time Format",
                "Specify the amount of time by using a combination of the following with no spaces:\n" +
                "- **w**eeks\n" +
                "- **d**ays\n" +
                "- **h**ours\n" +
                "- **m**inutes\n\n" +
                "Example: `1w3d` is 10 days, `10d12h` is 10 days and 12 hours, `1h30m` is an hour and 30 " +
                "minutes.\nThe minimum amount of time is 1 hour, and the maximum is 30 days.")
            .build();
    }

    public static RemindMeOnceCommand get() {
        if (singleton == null) singleton = new RemindMeOnceCommand();
        return singleton;
    }

    public Mono<Void> remindMeCommand(GuildMessageEventBundle bundle) {
        try {
            // Check that the user isn't at the semi-arbitrary limit of 10 reminders
            String group = createGroupForUser(bundle);
            Set<JobKey> jobKeys = AudyScheduler.getSqlRemindScheduler().getJobKeys(GroupMatcher.groupContains(group));
            if (jobKeys.size() >= 10) {
                bundle.getResponse().setContentTitle("You have 10 reminders in progress, please delete one " +
                        "or wait for another one to finish.")
                    .setState(CommandState.FAILED_EXPECTED);
                return Mono.empty();
            }

            long minutes = super.parseTimeIntoMinutes(bundle.getArgs().current());
            bundle.getArgs().advance();
            if (minutes < 0) {
                // Parsing error
                bundle.getResponse()
                    .setContentTitle("Couldn't parse the time value '" + bundle.getArgs().current() + "'")
                    .setState(CommandState.FAILED);

            } else if (minutes < 60 || minutes > 43200) {
                // Make sure the duration isn't shorter than an hour or longer than 30 days
                // This limit is arbitrary, but the lower limit should be kept in mind as to not have the bot used
                //  as a glorified timer.

                // This is the only way (as of 2021-02-05) to tell if we can send private messages to a user
                //  try and fail
                Message privateTestMessage = bundle
                        .getAuthor()
                        .getPrivateChannel()
                        .flatMap(channel -> channel.createMessage("Placeholder to check if I can DM you."))
                        .onErrorResume(t -> Mono.empty())
                        .block();

                // Make sure we can DM the user
                if (privateTestMessage == null) {
                    bundle.getResponse().setContentTitle(bundle.getAuthor().getMention() +
                            " I cannot message you directly. Please check your privacy settings and try again.");
                    bundle.getResponse().setState(CommandState.FAILED_EXPECTED);
                    return Mono.empty();
                }

                // Data to pair with the job for accessibility during execution
                JobDataMap reminderData = new JobDataMap();
                reminderData.put("creatingUserId", bundle.getAuthor().getId().asString());
                reminderData.put("creatingChannelId", bundle.getChannelId().asString());
                reminderData.put("creatingGuildId", bundle.getGuild().getId().asString());
                reminderData.put("creatingMessageId", bundle.getMessageId().asString());
                reminderData.put("destinationChannelId", privateTestMessage.getChannelId().asString());
                if (bundle.getArgs().remaining() > 0) {
                    String message = bundle.getArgs().combineRemaining();
                    reminderData.put("message", message);
                }

                Instant triggerTime = Instant.now().plus(Duration.ofMinutes(minutes));
                String name = bundle.getAuthor().getId().asString() + "-" + triggerTime.toString();
                super.scheduleReminderOnce(reminderData, name, group, triggerTime);

                // DM the calling user about the created reminder, checked we could send messages earlier
                privateTestMessage.edit(editSpec ->
                    editSpec.setContent("Your reminder hs been created, I'll send you another " +
                        "message here at `" + TimeFormatter.formatUTC(triggerTime) + "` " +
                        "with a link to where you created the reminder."))
                    .block();
                bundle.getResponse()
                    .setContentTitle("Scheduled new reminder for `" + TimeFormatter.formatUTC(triggerTime) + "`, " +
                        "please check your direct messages.")
                    .setState(CommandState.SUCCESS);

            } else {
                bundle.getResponse().setContentTitle("Only durations of more than 1 hour or less than 30 days are supported.");
                bundle.getResponse().setState(CommandState.FAILED_EXPECTED);
            }
        } catch (SchedulerException se) {
            bundle.getResponse().setThrowable(se);
        }

        return Mono.empty();
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }
}
