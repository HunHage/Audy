/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.arguments;

import java.util.Map;
import java.util.Optional;

public class ArgumentParserResult {
    public final String error;
    public final Map<String, Object> argValues;

    /**
     * Create a result with a reason why parsing failed.
     * When parsing fails then the value map will be unused.
     * @param error the reason why parsing failed
     */
    public ArgumentParserResult(String error) {
        this.error = error;
        this.argValues = null;
    }

    /**
     * Create a result with generated argument values. Called when parsing is successful.
     * @param argValues the arguments parsed with their values
     */
    public ArgumentParserResult(Map<String, Object> argValues) {
        this.error = null;
        this.argValues = argValues;
    }

    /**
     * Safely cast the value to the desired class;
     *
     * @param longOpt the argument to get the value of
     * @param clazz the class of what the value should be
     * @return empty if the argument has no value, or the instance casted if successful
     * @throws ClassCastException if the value cannot be cast to the specified class
     */
    public <T> Optional<T> castValue(String longOpt, Class<T> clazz) {
        // Should have no cases where we don't return within CommandListener when an error occurs
        //noinspection ConstantConditions
        Object value = argValues.getOrDefault(longOpt, null);

        if (value != null) {
            if (clazz.isAssignableFrom(value.getClass())) {
                return Optional.of(clazz.cast(value));
            } else {
                throw new ClassCastException("Could not cast argument! Argument: '" + longOpt +
                    "' Class: '" + clazz.getSimpleName() + "'");
            }
        }

        return Optional.empty();
    }

    public boolean hasError() { return error != null; }
    public String getError() { return error; }
    public Map<String, Object> getArgValues() { return argValues; }
}
