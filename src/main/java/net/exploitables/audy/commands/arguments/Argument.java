package net.exploitables.audy.commands.arguments;

import java.util.Optional;

/**
 * A class representing an argument for a command.
 * Due to the nature of the argument parsing system arguments are inherited.
 *
 * All arguments must have a longOpt and a description, if the value is used then a parser must be specified.
 */
public class Argument {
    private final String shortOpt;
    private final String longOpt;
    private final boolean required;
    private final boolean hasParameter;
    private final String parameterName;
    private final String description;
    private final ArgumentValueParser parser;

    /**
     * Create a new argument with all fields specified. Called by {@link ArgumentBuilder}
     * @param shortOpt single character identifier
     * @param longOpt multiple character identifier
     * @param required must this argument be specified
     * @param hasParameter does this argument have a parameter
     * @param parameterName what name should the parameter have
     * @param description description of what this argument does
     */
    Argument(String shortOpt,
                    String longOpt,
                    boolean required,
                    boolean hasParameter,
                    String parameterName,
                    String description,
                    ArgumentValueParser parser) {
        this.shortOpt = shortOpt;
        this.longOpt = longOpt;
        this.required = required;
        this.hasParameter = hasParameter;
        this.parameterName = parameterName;
        this.description = description;
        this.parser = parser;
    }

    public String               getShortOpt()           { return shortOpt; }
    public String               getLongOpt()            { return longOpt; }
    public boolean              isRequired()            { return required; }
    public boolean              hasParameter()          { return hasParameter; }
    public Optional<String>     getParameterName()      { return Optional.ofNullable(parameterName); }
    public String               getDescription()        { return description; }
    public Object               parseArgument(String s) { return parser.parseValue(s); }
}
