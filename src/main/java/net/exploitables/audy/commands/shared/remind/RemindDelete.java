/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.shared.remind;

import discord4j.core.event.domain.message.MessageCreateEvent;
import discord4j.core.object.entity.Message;
import net.exploitables.audy.AudyClient;
import net.exploitables.audy.AudyScheduler;
import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.commands.MessageBundle;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import org.quartz.JobKey;
import org.quartz.SchedulerException;
import org.quartz.impl.matchers.GroupMatcher;
import reactor.core.publisher.Mono;

import java.util.Set;
import java.util.stream.Collectors;

public class RemindDelete extends RemindSuperCommand {
    private static RemindDelete singleton;

    private CommandConfig commandConfig;

    private RemindDelete() {
        this.commandConfig = new CommandConfigBuilder(this::execute, this.getClass()).build();
    }

    public static RemindDelete get() {
        if (singleton == null) singleton = new RemindDelete();
        return singleton;
    }

    public Mono<Void> execute(MessageBundle bundle) {
        String name = bundle.getArgs().combineRemaining();

        if (name == null) {
            bundle.getResponse().setState(CommandState.FAILED_EXPECTED)
                .setContentTitle("Please provide the name of the reminder to delete, or `all`.");
            return Mono.empty();
        }

        try {
            String group = createGroupForUser(bundle);
            Set<JobKey> jobKeys = AudyScheduler.getSqlRemindScheduler().getJobKeys(GroupMatcher.groupContains(group));

            if (name.equals("all")) {
                bundle.getChannel().createMessage("Are you sure you want to delete all of your reminders? [y/n]").block();
                Set<JobKey> finalJobKeys = jobKeys;
                return AudyClient.getClient().waitForMessage(bundle.getAuthorId(), bundle.getChannelId())
                    .map(MessageCreateEvent::getMessage)
                    .map(Message::getContent)
                    .flatMap(string -> {
                        try {
                            if (string.equals("y")) {
                                for (JobKey jobKey : finalJobKeys) {
                                    AudyScheduler.getSqlRemindScheduler().deleteJob(jobKey);
                                }
                                bundle.getResponse().setState(CommandState.SUCCESS)
                                    .setContentTitle("Deleted `" + finalJobKeys.size() + "` reminders.");
                            } else if (string.equals("n")) {
                                bundle.getResponse().setState(CommandState.SUCCESS)
                                    .setContentTitle("Deletion cancelled.");
                            } else {
                                return bundle.getChannel().createMessage("Please enter `y` or `n`")
                                    .then(Mono.error(new Exception("invalid response")));
                            }
                        } catch (SchedulerException se) {
                            return Mono.error(se);
                        }
                        return Mono.empty();
                    })
                    .retry(3)
                    .then();
            } else {
                jobKeys = jobKeys.stream().filter(jobKey -> jobKey.getName().equals(name)).collect(Collectors.toSet());
                if (jobKeys.size() == 1) {
                    JobKey reminderKey = jobKeys.iterator().next();
                    AudyScheduler.getSqlRemindScheduler().deleteJob(reminderKey);
                    bundle.getResponse().setState(CommandState.SUCCESS)
                        .setContentTitle("Successfully deleted reminder `" + reminderKey.getName() + "`");
                } else if (jobKeys.size() > 1) {
                    bundle.getResponse().setState(CommandState.FAILED)
                        .setContentTitle("Found two reminders with the same name, a bug report has been sent.");
                } else {
                    bundle.getResponse().setState(CommandState.FAILED_EXPECTED)
                        .setContentTitle("No reminder found with that name.");
                }
            }
        } catch (SchedulerException se) {
            bundle.getResponse().setThrowable(se);
        }

        return Mono.empty();
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }
}
