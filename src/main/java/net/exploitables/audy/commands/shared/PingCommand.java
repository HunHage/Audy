/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands.shared;

import discord4j.core.object.entity.Message;
import net.exploitables.audy.commands.CommandState;
import net.exploitables.audy.commands.MessageBundle;
import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.utilities.TimeFormatter;
import reactor.core.publisher.Mono;

import java.time.Instant;

public class PingCommand {
    private static PingCommand singleton;

    // Command Configuration and reference to the command method.
    private CommandConfig commandConfig;

    private PingCommand() {
        this.commandConfig = new CommandConfigBuilder(this::ping, this.getClass())
            .addHelp("Ping", "Measure various times for a round trip (You -> Me -> You) response.")
            .build();
    }

    public static PingCommand get() {
        if (singleton == null) singleton = new PingCommand();
        return singleton;
    }

    /**
     * Measure the times from user sending a command message to received by the bot, then the amount of time to respond.
     * @return an empty Mono when execution is complete
     */
    public Mono<Void> ping(MessageBundle bundle) {
        Instant callingMessage = bundle.getMessage().getTimestamp();
        Message response = bundle.getChannel().createMessage("Measuring ...").block();

        // Since we already sent a message we don't need to send another post-execution.
        bundle.getResponse().setState(CommandState.SUCCESS_NO_SEND);

        //noinspection ConstantConditions
        return response.edit(editSpec -> editSpec.setContent("Pong!\n" + TimeFormatter.formatSmallAge(callingMessage, response.getTimestamp()))).then();
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }
}
