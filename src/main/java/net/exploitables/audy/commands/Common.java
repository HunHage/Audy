/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands;

import net.exploitables.audy.data.CommandConfig;
import net.exploitables.audy.data.CommandConfigBuilder;
import net.exploitables.audy.data.bundles.MessageEventBundle;
import reactor.core.publisher.Mono;

/**
 * The default command class for the CommandTree, sends back help when it is called.
 */
public class Common {
    private static Common singleton;

    // Command Configuration and reference to the command method.
    private CommandConfig commandConfig;

    /**
     * Create a new "Common" command and configure it.
     */
    private Common() {
        this.commandConfig = new CommandConfigBuilder(this::defaultCommand, Common.class).build();
    }

    public static Common get() {
        if (singleton == null) singleton = new Common();
        return singleton;
    }

    /**
     * Called by default within the command tree when no command exists for a node.
     * This happens when a command is referenced, but it's sub-command needs to be called instead,
     *  or the (sub-)command referenced doesn't exist.
     * This will respond with the known specified
     * @return  an empty Mono when execution is complete
     */
    public <B extends MessageEventBundle> Mono<Void> defaultCommand(B bundle) {
        bundle.getResponse().setContent(String.join(" ", bundle.getCommandNode().getRoute()));
        bundle.getResponse().setState(CommandState.SUCCESS);
        return Mono.empty();
    }

    public CommandConfig getCommandConfig() {
        return this.commandConfig;
    }
}
