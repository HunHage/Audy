/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands;

import discord4j.common.util.Snowflake;
import discord4j.core.event.domain.message.MessageCreateEvent;
import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.MessageChannel;
import net.exploitables.audy.commands.arguments.ArgumentParser;
import net.exploitables.audy.data.entity.GuildConfig;
import net.exploitables.audy.data.entity.UserConfig;
import net.exploitables.audy.data.entity.UserConfigFactory;
import net.exploitables.audy.internal.ArgsList;
import net.exploitables.audy.internal.tree.CommandTreeNode;
import reactor.core.publisher.Mono;

import java.util.Optional;

/**
 * A "bundle" of data related to MessageCreateEvent which aids in the command lifecycle.
 */
public class MessageBundle {
    // ##### Present For All Events #####
    // Entities
    final MessageCreateEvent event;
    final Message message;
    final MessageChannel channel;
    final User author;

    // Entity IDs
    final Snowflake messageId;
    final Snowflake channelId;
    final Snowflake authorId;

    // Command
    final CommandTreeNode commandNode;
    final ArgsList args;
    final CommandResponse response;
    final ArgumentParser parserResult;

    // UserConfig
    UserConfig userConfig;

    // ##### Present For Guild Events #####
    // Entities
    final Guild guild;
    final String guildPrefix;
    final Member member;

    // Configurations
    GuildConfig guildConfig;

    public MessageBundle(MessageBundleBuilder builder) {
        this.event = builder.event;
        this.message = builder.message;
        this.channel = builder.channel;
        this.author = builder.author;

        this.messageId = builder.messageId;
        this.channelId = builder.channelId;
        this.authorId = builder.authorId;

        this.commandNode = builder.commandNode;
        this.args = builder.argsList;
        this.response = new CommandResponse();
        this.parserResult = builder.argumentParser;

        this.userConfig = builder.userConfig;

        this.guild = builder.guild;
        this.guildPrefix = builder.guildPrefix;
        this.member = builder.member;

        this.guildConfig = builder.guildConfig;
    }

    public final UserConfig getUserConfig() {
        if (this.userConfig == null) {
            this.userConfig = UserConfigFactory.getOrCreateUserConfig(this.author).block();
        }
        return this.userConfig;
    }

    public final Mono<GuildConfig> getGuildData() {
        if (this.guildConfig == null) {
            this.guildConfig = GuildConfig.getGuildConfig(guild).block();
        }
        return Mono.justOrEmpty(guildConfig);
    }

    public Mono<Void> executeCommand() {
        return this.commandNode.getValue().getCommand().executeCommand(this);
    }

    public final MessageCreateEvent getEvent()              { return event; }
    public final Message getMessage()                       { return message; }
    public final MessageChannel getChannel()                { return channel; }
    public final User getAuthor()                           { return author; }

    public final Snowflake getMessageId()                   { return messageId; }
    public final Snowflake getChannelId()                   { return channelId; }
    public final Snowflake getAuthorId()                    { return authorId; }

    public final CommandTreeNode getCommandNode()           { return commandNode; }
    public final ArgsList getArgs()                         { return args; }
    public final CommandResponse getResponse()              { return response; }
    public final Optional<ArgumentParser> getParserResult() { return Optional.ofNullable(parserResult); }

    public final Optional<Guild> getGuild()                 { return Optional.ofNullable(guild); }
    public final Optional<String> getGuildPrefix()          { return Optional.ofNullable(guildPrefix); }
    public final Optional<Member> getMember()               { return Optional.ofNullable(member); }
}
