/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands;

import discord4j.core.event.domain.message.MessageCreateEvent;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.channel.PrivateChannel;
import net.exploitables.audy.AudyMain;
import net.exploitables.audy.commands.arguments.ArgParseException;
import net.exploitables.audy.commands.arguments.ArgumentParser;
import net.exploitables.audy.commands.direct.config.UserTimezoneCommand;
import net.exploitables.audy.commands.shared.DefaultResponse;
import net.exploitables.audy.commands.shared.HelpCommand;
import net.exploitables.audy.commands.shared.PingCommand;
import net.exploitables.audy.data.CommandCategory;
import net.exploitables.audy.internal.ArgsList;
import net.exploitables.audy.internal.DetailedThrowable;
import net.exploitables.audy.internal.ThrowableReport;
import net.exploitables.audy.internal.tree.CommandTree;
import net.exploitables.audy.internal.tree.CommandTreeNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;

public class DirectCommandListener {
    private static final Logger logger = LoggerFactory.getLogger(GuildCommandListener.class);
    private static DirectCommandListener singleton = null;

    private CommandTree commandTree;

    private DirectCommandListener() {
        commandTree = new CommandTree(DefaultResponse.get().getCommandConfig());

        // ##### SQL Required for Functionality #####
        if (AudyMain.getConfiguration().isSqlEnabled()) {
            // User Configuration
            commandTree.addTopLevelChild(DefaultResponse.get().getCommandConfig(),    "config", CommandCategory.Configuration);
            commandTree.addChildByRoute(UserTimezoneCommand.get().getCommandConfig(), "config", "timezone");
        }
        // ##### SQL Optional for Functionality #####
        // Help
        commandTree.addTopLevelChild(HelpCommand.get().getCommandConfig(),       "help", CommandCategory.Help);
        // Ping
        commandTree.addTopLevelChild(PingCommand.get().getCommandConfig(),       "ping", CommandCategory.Miscellaneous);
    }

    public static DirectCommandListener get() {
        if (singleton == null) singleton = new DirectCommandListener();
        return singleton;
    }

    public Mono<Message> receiveMessageCreateEvent(MessageCreateEvent event) {
        MessageBundleBuilder mbb = event.getMessage().getChannel()
            .filter(c -> c instanceof PrivateChannel)
            .flatMap(c -> MessageBundleBuilder.createBuilderForPrivateEvent(event, c))
            .block();

        if (mbb == null) {
            return Mono.empty();
        } else {
            mbb.argsList = ArgsList.fromPrivateMessageContent(event.getMessage().getContent());
            mbb.commandNode = commandTree.getNodeByRoute(mbb.argsList);

            if (mbb.commandNode.getValue().getArgumentParser().isPresent()) {
                mbb.argumentParser = new ArgumentParser(mbb.commandNode.getValue().getArgumentParser().get());
                try {
                    mbb.argumentParser.parseArgs(mbb.argsList);
                } catch (ArgParseException ape) {
                    return mbb.channel.createMessage("Unable to parse arguments, please try again! `" + ape.getMessage() + "`");
                }
            }

            MessageBundle messageBundle = mbb.build().block();
            try {
                //noinspection ConstantConditions
                messageBundle.executeCommand().block();
            } catch (Throwable throwable) {
                messageBundle.getResponse().setThrowable(throwable);
            }

            CommandResponse response = messageBundle.getResponse();
            if (response.getState().notifyError()) {
                if (response.getState() == CommandState.UNKNOWN) {
                    response.setThrowable(new DetailedThrowable("CommandStateUnknown").addEventLog(event));
                }
                new ThrowableReport(response.getThrowable()).reportException().block();
                return messageBundle.channel.createMessage(response.asMessage());
            } else if (response.getState().shouldRespond()) {
                return messageBundle.channel.createMessage(messageBundle.getResponse().asMessage());
            } else {
                return Mono.empty();
            }
        }
    }

    public CommandTreeNode getCommandTreeNode(ArgsList argsList) {
        return commandTree.getNodeByRoute(argsList);
    }
}
