/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands;

import discord4j.core.spec.EmbedCreateSpec;
import discord4j.core.spec.MessageCreateSpec;

import java.text.MessageFormat;
import java.util.function.Consumer;

/**
 * A Class which contains the execution state of a command, this is parsed after a command is executed to determine
 *  how to respond to the user who called it.
 */
public class CommandResponse {
    private CommandState commandState;
    private String messageContent;
    private Consumer<EmbedCreateSpec> messageEmbed;
    private Throwable throwable;

    /**
     * Create a new, completely empty, CommandResponse.
     * This cannot be sent to Discord as it is empty, it must have message content/embed set.
     */
    public CommandResponse() {
        commandState = CommandState.UNKNOWN;
        messageContent = "";
        messageEmbed = null;
    }

    /**
     * @param state execution state of the command
     * @return this instance
     */
    public CommandResponse setState(CommandState state) {
        this.commandState = state;
        return this;
    }

    /**
     * @param content content to be sent in the response message
     * @return this instance
     */
    public CommandResponse setContent(String content) {
        this.messageContent = content;
        return this;
    }

    /**
     * @param embedSpec embed to be send in the response message
     * @return this instance
     */
    public CommandResponse setEmbed(Consumer<EmbedCreateSpec> embedSpec) {
        this.messageEmbed = embedSpec;
        return this;
    }

    /**
     * Set the state of the command to ERROR and set the content to the throwable message.
     * @param throwable the unhandled exception encountered during command execution
     * @return this instance
     */
    public CommandResponse setException(Throwable throwable) {
        this.setState(CommandState.ERROR);
        this.messageContent = throwable.getMessage();
        // Append a secondary reason if exists.
        if (throwable.getCause() != null) {
            this.messageContent = "'" + this.messageContent + "' caused by '" + throwable.getCause().getMessage() + "'";
        }
        return this;
    }

    /**
     * Construct a message based on the state and set content/embed of this instance
     * @return a consumable message
     */
    public Consumer<MessageCreateSpec> asMessage() {
        return (spec) -> {
            if (this.commandState.error) {
                this.messageContent = MessageFormat.format(this.commandState.statement, this.messageContent);
            }

            spec.setContent(this.messageContent);
            if (this.messageEmbed != null) {
                spec.setEmbed(this.messageEmbed);
            }
        };
    }

    public CommandState getState()                      { return commandState; }
    public String getMessageContent()                   { return messageContent; }
    public Consumer<EmbedCreateSpec> getMessageEmbed()  { return messageEmbed; }
    public Throwable getThrowable()                     { return throwable; }
}
