/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.commands;

import discord4j.core.spec.EmbedCreateSpec;
import discord4j.core.spec.MessageCreateSpec;
import discord4j.rest.util.Color;
import net.exploitables.audy.AudyMain;

import java.text.MessageFormat;
import java.util.function.Consumer;

/**
 * A Class which contains the execution state of a command, this is parsed after a command is executed to determine
 *  how to respond to the user who called it.
 */
public class CommandResponse {
    private CommandState commandState;
    private String messageTitle;
    private String messageDescription;
    private Consumer<EmbedCreateSpec> messageEmbed;
    private Throwable throwable;

    /**
     * Create a new, completely empty, CommandResponse.
     * This cannot be sent to Discord as it is empty, it must have message content/embed set.
     */
    public CommandResponse() {
        commandState = CommandState.UNKNOWN;
        messageTitle = "";
        messageDescription = "";
        messageEmbed = null;
    }

    /**
     * @param state execution state of the command
     * @return this instance
     */
    public CommandResponse setState(CommandState state) {
        this.commandState = state;
        return this;
    }

    /**
     * Set a "title" section for the response message.
     * This is always sent if the CommandState is set to reply with a message, but may be formatted.
     *
     * @param content title content to be sent in the response message
     * @return this instance
     */
    public CommandResponse setContentTitle(String content) {
        this.messageTitle = content;
        return this;
    }

    /**
     * Set a "description" section for the response message.
     * This is always sent if the CommandState is set to reply with a message,
     *  and will never have additional formatting applied.
     * This is intended to be used for code blocks.
     *
     * @param content content to be sent in the response message, appended after the title
     * @return this instance
     */
    public CommandResponse setContentDescription(String content) {
        this.messageDescription = content;
        return this;
    }

    /**
     * Provides the existing (created if not) embed for this response to be modified.
     * This way default values can be set on the embed.
     *
     * @param embedUpdate embed to be send in the response message
     * @return this instance
     */
    public CommandResponse updateEmbed(Consumer<EmbedCreateSpec> embedUpdate) {
        if (this.messageEmbed == null) {
            // Create embed with defaults
            this.messageEmbed = spec -> spec.setColor(Color.of(AudyMain.getConfiguration().getEmbedColor()));
        }

        this.messageEmbed = this.messageEmbed.andThen(embedUpdate);
        return this;
    }

    /**
     * Set the state of the command to ERROR and set the content to the throwable message.
     * @param throwable the unhandled exception encountered during command execution
     * @return this instance
     */
    public CommandResponse setThrowable(Throwable throwable) {
        this.throwable = throwable;
        this.setState(CommandState.ERROR);
        this.messageTitle = throwable.getClass().getSimpleName();
        // Append a secondary throwable name if exists
        if (throwable.getCause() != null) {
            this.messageTitle = "'" + this.messageTitle + "' caused by '" +
                    throwable.getCause().getClass().getSimpleName() + "'";
        }
        return this;
    }

    /**
     * Construct a message based on the state and set content/embed of this instance
     * @return a consumable message
     */
    public Consumer<MessageCreateSpec> asMessage() {
        return (spec) -> {
            if (this.commandState.error) {
                this.messageTitle = MessageFormat.format(this.commandState.statement, this.messageTitle);
            }

            if (this.messageDescription.isEmpty()) {
                spec.setContent(this.messageTitle);
            } else {
                // Avoid having the monospace formatting applied to the description
                // as the description is used for code blocks
                spec.setContent(this.messageTitle + "\n" + this.messageDescription);
            }

            if (this.messageEmbed != null) {
                spec.setEmbed(this.messageEmbed);
            }
        };
    }

    public CommandState getState()                      { return commandState; }
    public String getMessageTitle()                   { return messageTitle; }
    public Consumer<EmbedCreateSpec> getMessageEmbed()  { return messageEmbed; }
    public Throwable getThrowable()                     { return throwable; }
}
