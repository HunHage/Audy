package net.exploitables.audy.commands;

import discord4j.common.util.Snowflake;
import discord4j.core.event.domain.message.MessageCreateEvent;
import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.object.entity.channel.MessageChannel;
import net.exploitables.audy.commands.arguments.ArgumentParser;
import net.exploitables.audy.data.entity.GuildConfig;
import net.exploitables.audy.data.entity.UserConfig;
import net.exploitables.audy.internal.ArgsList;
import net.exploitables.audy.internal.tree.CommandTreeNode;
import reactor.core.publisher.Mono;

public class MessageBundleBuilder {
    // ##### Present For All Events #####
    // Entities
    final MessageCreateEvent event;
    final Message message;
    MessageChannel channel;
    User author;

    // Entity IDs
    final Snowflake messageId;
    final Snowflake channelId;
    Snowflake authorId;

    // Command
    CommandTreeNode commandNode;
    ArgsList argsList;
    //CommandResponse response;
    ArgumentParser argumentParser;

    // UserConfig
    UserConfig userConfig;

    // ##### Present For Guild Events #####
    // Entities
    Guild guild;
    Member member;

    // Configurations
    GuildConfig guildConfig;

    /**
     * Create a new Builder which takes all immediately accessible data from a {@link MessageCreateEvent}
     * @param event the event to create this builder for
     */
    private MessageBundleBuilder(MessageCreateEvent event) {
        this.event = event;
        this.message = event.getMessage();

        this.messageId = message.getId();
        this.channelId = event.getMessage().getChannelId();
    }

    public static Mono<MessageBundleBuilder> createBuilderForPrivateEvent(MessageCreateEvent event, MessageChannel channel) {
        return Mono.just(new MessageBundleBuilder(event))
            // Precondition is that this channel is already known to be a PrivateChannel
            .flatMap(mbb -> mbb.setChannel(channel))
            // Check the author is not a bot and set it
            .flatMap(mbb -> Mono.justOrEmpty(mbb.message.getAuthor())
                .filter(user -> !user.isBot())
                .flatMap(mbb::setAuthor));
    }

    public static Mono<MessageBundleBuilder> createBuilderForGuildEvent(MessageCreateEvent event) {
        return Mono.just(new MessageBundleBuilder(event))
            // Check the channel is a guild channel and set it
            .flatMap(mbb -> event.getMessage().getChannel()
                .filter(ch -> ch instanceof GuildChannel)
                .flatMap(mbb::setChannel))
            // Check the author is not a bot and set it and the member
            .flatMap(mbb -> mbb.message.getAuthorAsMember()
                .filter(user -> !user.isBot())
                .flatMap(mbb::setMember))
            // Ensure the guild is present
            .flatMap(mbb -> event.getGuild().flatMap(mbb::setGuild));
    }

    private Mono<MessageBundleBuilder> setChannel(MessageChannel channel) {
        this.channel = channel;
        return Mono.just(this);
    }

    private Mono<MessageBundleBuilder> setAuthor(User author) {
        this.author = author;
        this.authorId = author.getId();
        return Mono.just(this);
    }

    public Mono<MessageBundleBuilder> setCommandNode(CommandTreeNode commandNode) {
        this.commandNode = commandNode;
        return Mono.just(this);
    }

    public Mono<MessageBundleBuilder> setArgsList(ArgsList argsList) {
        this.argsList = argsList;
        return Mono.just(this);
    }

    public Mono<MessageBundleBuilder> setParserResult(ArgumentParser argumentParser) {
        this.argumentParser = argumentParser;
        return Mono.just(this);
    }

    public Mono<MessageBundleBuilder> setUserConfig(UserConfig userConfig) {
        this.userConfig = userConfig;
        return Mono.just(this);
    }

    private Mono<MessageBundleBuilder> setGuild(Guild guild) {
        this.guild = guild;
        return Mono.just(this);
    }

    private Mono<MessageBundleBuilder> setMember(Member member) {
        this.author = member;
        this.member = member;
        return Mono.just(this);
    }

    public Mono<MessageBundleBuilder> setGuildConfig(GuildConfig guildConfig) {
        this.guildConfig = guildConfig;
        return Mono.just(this);
    }

    public Mono<MessageBundle> build() {
        return Mono.just(new MessageBundle(this));
    }
}
