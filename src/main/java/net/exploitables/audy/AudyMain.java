/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.nio.file.Paths;
import java.util.Properties;

public class AudyMain {
    // Invite Link
    // https://discordapp.com/api/oauth2/authorize?client_id=<<<BOT_ID>>>&permissions=0&scope=bot

    private static final Logger logger = LoggerFactory.getLogger(AudyMain.class);

    private static AudyConfig configuration;
    private static Properties properties;
    private static String version;
    private static String d4jVersion;

    private static AudyClient audyClient;
    private static String token;

    /**
     * Main entry point for the bot
     * @param args arguments passed in externally
     */
    public static void main(String[] args) {
        for (String arg : args) {
            if (arg.startsWith("--token=")) {
                token = arg.substring(8);
            }
        }

        if (token == null) {
            logger.error("Please pass the token in as an argument with '--token=TOKEN_HERE'");
            System.exit(-1);
        }

        try {
            // Configuration file, external
            configuration = AudyConfigLoader.loadConfiguration();
            // Project Properties, internal, created when compiled
            properties = new Properties();
            properties.load(AudyMain.class.getClassLoader().getResourceAsStream("project.properties"));
            version = 'v' + properties.getProperty("buildversion");
            d4jVersion = 'v' + properties.getProperty("d4jversion");

            // Create directory for logs if it does't exist
            File thrownLogsDirectory = Paths.get("Logs", "Thrown").toFile();
            if (!thrownLogsDirectory.mkdirs() && !thrownLogsDirectory.exists()) {
                logger.error("Couldn't create directories for logging!");
                System.exit(-1);
            }
        } catch (Exception e) {
            StringBuilder builder = new StringBuilder();
            for (StackTraceElement ste : e.getStackTrace()) { builder.append(ste).append("\n"); }
            logger.error("Exception occurred while loading configuration and internal properties");
            logger.error(e.getMessage());
            logger.error(builder.toString());
            System.exit(-1);
        }

        AudyDatabase.setupDatabase();
        AudyScheduler.setupSchedulers();

        // This will cause the Discord client to be created and to log in
        //  as it is the first call to the singleton
        AudyClient.getClient();

        // Now that the client has logged in we can start our schedulers
        if (!AudyScheduler.startSchedulers()) {
            logger.error("Failed to start schedulers! Logging out and shutting down ...");
            AudyClient.getClient().getGateway().logout().block();
            logger.error("Logged out from discord.");
            System.exit(-1);
        }

        logger.info("Blocking main thread until disconnect.");
        AudyClient.getClient().blockUntilDisconnect();
    }

    public static AudyConfig getConfiguration() { return configuration; }
    public static String     getVersion()       { return version; }
    public static String     getD4JVersion()    { return d4jVersion; }
    public static String     getToken()         { return token; }
}
