/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.scheduler;

import discord4j.common.util.Snowflake;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.rest.util.Color;
import net.exploitables.audy.AudyClient;
import net.exploitables.audy.AudyMain;
import net.exploitables.audy.internal.DetailedThrowable;
import net.exploitables.audy.internal.ThrowableReport;
import net.exploitables.audy.utilities.TimeFormatter;
import org.quartz.Job;
import org.quartz.JobDataMap;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.text.MessageFormat;
import java.time.Instant;

public class ReminderJob implements Job {
    private static Logger logger = LoggerFactory.getLogger(ReminderJob.class);

    /**
     * Send a scheduled reminder to its designated channel (currently DMs only)
     *
     * The JobExecutionContext will contain the following
     * Key                      Value (parsed)  Desc
     * nextFireTime             long            Time in millis from the unix epoch that this job should be triggered at
     *
     * creatingUserId           long            The Snowflake ID of the user who created the reminder
     * creatingGuildId          long/null       The Snowflake ID of the guild the reminder was created in, null when DM
     * creatingChannelId        long            The Snowflake ID of the channel the reminder was created in
     * creatingMessageId        long            The Snowflake ID of the message the reminder was created from
     *
     * destinationChannelId     long            The Snowflake ID of the channel to send the message to
     * destinationGuildId       long/null       The Snowflake ID of the guild the destination channel is in
     *
     * message                  String/null     The message to attach with the reminder
     *
     *
     * @param context data relating to the reminder, such as the user-specified message and the channel to send to
     * @throws JobExecutionException
     */
    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        logger.debug("ReminderJob started ...");
        JobDataMap dataMap = context.getMergedJobDataMap();

        // Make sure we didn't miss the firing time, would be GREAT if there was a standard way to discern this
        //  within Quartz, but it just fires the job with no additional context and resets the firing times ...
        // And no, missing the firing time does not put this job into a recovering state.
        final long millisOff = Instant.now().toEpochMilli() - dataMap.getLong("nextFireTime");

        // Since the reminder scheduler is persistent we cannot store D4J objects in it, as the data can become stale
        //  and no longer reference valid data with Discord (deleted channel/user, user set DMs private, etc)
        AudyClient.getClient().getGateway()
            .getChannelById(Snowflake.of(dataMap.getString("destinationChannelId")))
            .ofType(MessageChannel.class)
            .flatMap(channel -> channel.createEmbed(embed -> {
                embed.setColor(Color.of(AudyMain.getConfiguration().getEmbedColor()));
                embed.setFooter(AudyMain.getVersion(), null);
                if (millisOff > 60000) { // Missed by more than a minute
                    embed.setTitle("Missed Reminder Notification! (" +
                            TimeFormatter.formatDaysHoursMinutesAge(millisOff) + " ago)");
                } else {
                    embed.setTitle("Reminder Notification!");
                }
                String message = dataMap.getString("message");
                if (message != null) {embed.setDescription(message); }
                embed.addField("Link to where reminder was created:", createOriginalMessageLink(dataMap), false);
            }))
            .onErrorResume(throwable ->
                    new ThrowableReport(
                        new DetailedThrowable(throwable)
                            .addAdditionalMessage("JobKey", context.getJobDetail().getKey().toString()))
                .reportException())
            .block();

        // Update the next firing time if this job has a next firing time
        // Untested, as repeating reminders aren't implemented yet
        if (context.getNextFireTime() != null) {
            dataMap.put("nextFireTime", context.getNextFireTime().toInstant().toEpochMilli());
        }

        logger.debug("ReminderJob finished.");
    }

    /**
     * @param dataMap the MergedJobDataMap for the respective reminder job
     * @return a url that when clicked leads to the message where the reminder was created
     */
    private String createOriginalMessageLink(JobDataMap dataMap) {
        // Untested for the @me part, in the discord URL "@me" represents the users DMs in place of a guild ID
        String guildId = (String) dataMap.getOrDefault("creatingGuildId", "@me");
        return MessageFormat.format("https://discord.com/channels/{0}/{1}/{2}",
            guildId,
            dataMap.getString("creatingChannelId"),  // Should always be present
            dataMap.getString("creatingMessageId")); // Should always be present
    }
}
