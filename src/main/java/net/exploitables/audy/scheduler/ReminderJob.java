/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.scheduler;

import discord4j.common.util.Snowflake;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.rest.util.Color;
import net.exploitables.audy.AudyClient;
import net.exploitables.audy.AudyMain;
import net.exploitables.audy.internal.DetailedThrowable;
import net.exploitables.audy.internal.ThrowableReport;
import org.quartz.Job;
import org.quartz.JobDataMap;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReminderJob implements Job {
    private static Logger logger = LoggerFactory.getLogger(ReminderJob.class);

    /**
     * Send a scheduled reminder to its designated channel (currently DMs only)
     *
     * @param context data relating to the reminder, such as the user-specified message and the channel to send to
     * @throws JobExecutionException
     */
    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        logger.debug("ReminderJob started ...");
        JobDataMap dataMap = context.getMergedJobDataMap();
        // Since the reminder scheduler is persistent we cannot store D4J objects in it, and the data can become stale
        //  and no longer reference valid data with Discord (deleted channel/user, user set DMs private, etc)
        AudyClient.getClient().getGateway()
            .getChannelById(Snowflake.of(dataMap.getString("channelId")))
            .doOnEach(channel -> logger.debug("channel present: " + channel.hasValue()))
            .ofType(MessageChannel.class)
            .doOnEach(channel -> logger.debug("message channel present: " + channel.hasValue()))
            .flatMap(channel -> channel.createEmbed(embed -> {
                embed.setColor(Color.of(AudyMain.getConfiguration().getEmbedColor()));
                embed.setFooter(AudyMain.getVersion(), null);

                embed.setTitle("Reminder Notification!");
                String message = dataMap.getString("message");
                if (message != null) {embed.setDescription(message); }
                embed.addField("Link to where reminder was created:", dataMap.getString("sourceLink"), false);
            }))
            .doOnEach(channel -> logger.debug("message sent:" + channel.hasValue()))
            .onErrorResume(throwable ->
                    new ThrowableReport(
                        new DetailedThrowable(throwable)
                            .addAdditionalMessage("JobKey", context.getJobDetail().getKey().toString()))
                .reportException())
            .block();
        logger.debug("ReminderJob finished.");
    }
}
