package net.exploitables.audy.scheduler;

import discord4j.common.util.Snowflake;
import net.exploitables.audy.AudyDatabase;
import net.exploitables.audy.AudyMain;
import org.quartz.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.Duration;
import java.time.Instant;

public class ArchivedMessageDeleteJob implements Job {
    private static Logger logger = LoggerFactory.getLogger(ArchivedMessageDeleteJob.class);

    public static void scheduleJobs(Scheduler scheduler) throws SchedulerException {
        logger.info("Scheduling ArchivedMessageDeleteJob for scheduler: " + scheduler.getSchedulerName());
        JobDetail jobDetail = JobBuilder
            .newJob(ArchivedMessageDeleteJob.class)
            .withIdentity("ArchivedMessageDelete", "SqlMaintenance")
            .build();
        SimpleTrigger trigger = (SimpleTrigger) TriggerBuilder
            .newTrigger()
            .withIdentity("ArchivedMessageDelete", "SqlMaintenance")
            // This means there may be a full 2 hour delay before starting the job, or only a few seconds.
            // This job runs at a minimum of every hour, so this should be OK as if the bot doesn't have the
            //  uptime to execute a job within the next 2 hours consistently there are larger problems afoot.
            .startAt(DateBuilder.evenHourDateAfterNow())
            .withSchedule(SimpleScheduleBuilder.repeatHourlyForever(AudyMain.getConfiguration().getUserDataRetentionInterval()))
            .build();

        scheduler.scheduleJob(jobDetail, trigger);

        logger.info("ArchivedMessageDeleteJob scheduled for: " + scheduler.getSchedulerName());
    }

    /**
     * Delete old entries in the ArchivedMessagesTable every Hour.
     * @param context unused for this job
     * @throws JobExecutionException
     */
    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
        logger.info("Executing scheduled job to delete ArchivedMessage entries ...");
        // SELECT SUM(octet_length(data_bytes)) as sum_data_bytes FROM tbl_archived_file
        // Get the snowflake ID of X hours into the past according to the set retention period
        Snowflake pastThreshold = Snowflake.of(
                Instant.now().minus(Duration.ofHours(AudyMain.getConfiguration().getUserDataRetentionHours())));

        // Delete all archived message attachments/contents before deleting the message
        //  entries themselves, due to foreign key restrictions.
        // From my understanding, cascade delete in Postgres only works when the other tables have
        //  foreign key as a primary key, which isn't possible due to messages having multiple contents/attachments
        int rowsDeleted = AudyDatabase.getJdbi().withHandle(handle ->
            handle.createUpdate("DELETE FROM tbl_message_attachments" +
                " WHERE message_id < :pastThreshold;")
                .bind("pastThreshold", pastThreshold.asLong())
                .execute()
            );
        rowsDeleted += AudyDatabase.getJdbi().withHandle(handle ->
            handle.createUpdate("DELETE FROM tbl_message_contents" +
                " WHERE message_id < :pastThreshold;")
                .bind("pastThreshold", pastThreshold.asLong())
                .execute()
        );
        rowsDeleted += AudyDatabase.getJdbi().withHandle(handle ->
            handle.createUpdate("DELETE FROM tbl_messages" +
                " WHERE pk_id < :pastThreshold;")
                .bind("pastThreshold", pastThreshold.asLong())
                .execute()
        );

        logger.info("Removed " + rowsDeleted + " rows after deleting old ArchivedMessage entries.");
    }
}
