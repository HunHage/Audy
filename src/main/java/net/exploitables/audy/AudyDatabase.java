/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy;

import com.zaxxer.hikari.HikariDataSource;
import org.flywaydb.core.Flyway;
import org.flywaydb.core.api.MigrationInfoService;
import org.postgresql.ds.PGSimpleDataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Database access and management class.
 */
public class AudyDatabase {
    private static final Logger logger = LoggerFactory.getLogger(AudyDatabase.class);
    private static HikariDataSource hikariDataSource;
    // Master state for if SQL operations should be used
    private static boolean databaseEnabled = false;

    /**
     * Setup a HikariCP for pooled connections, using configuration values from {@link AudyConfig}
     */
    public static void setupDatabase() {
        logger.info("Setting up Database connection ... ");
        assert hikariDataSource == null;
        AudyConfig audyConfig = AudyMain.getConfiguration();

        if (!audyConfig.isSqlEnabled()) {
            logger.info("SQLEnabled in configuration file set to false, skipping Database setup.");
            return;
        }

        logger.info("Setting up SQL DataSource ...");
        // Create a PostgreSQL data source and configure it for access
        PGSimpleDataSource dataSource = new PGSimpleDataSource();
        dataSource.setUser(audyConfig.getSqlUsername());
        dataSource.setPassword(audyConfig.getSqlPassword());
        dataSource.setDatabaseName(audyConfig.getSqlDatabaseName());
        dataSource.setServerName(audyConfig.getSqlServerAddress());
        dataSource.setPortNumber(Integer.parseInt(audyConfig.getSqlServerPort()));

        logger.info("Setting up Hikari DataSource ...");
        hikariDataSource = new HikariDataSource();
        hikariDataSource.setDataSource(dataSource);

        logger.info("Connecting Flyway to Database ...");
        Flyway flyway = Flyway.configure().dataSource(hikariDataSource).load();
        MigrationInfoService migrationInfo = flyway.info();
        if (migrationInfo.pending().length > 0) {
            logger.info("There are " + migrationInfo.pending().length +
                    " pending migrations for the Database, applying ...");
            flyway.migrate();
            logger.info("Database migrations applied.");
        }

        logger.info("Database setup complete.");
    }

}
