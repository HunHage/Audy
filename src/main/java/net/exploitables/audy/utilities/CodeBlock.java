/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.utilities;

import java.util.List;

enum LeftCenterRight {
    LEFT,
    CENTER,
    RIGHT
}

enum QuoteType {
    NONE,
    SINGLE,
    BLOCK
}

/**
 * This class is absolutely ancient and has existed for years, prepare for non-standard practices.
 */
public class CodeBlock {
    // Width for next append
    private int nextWidth;
    // Filler for each nextWidth
    private char fill;
    // Place the object to the left, center, or right. Represented by -1, 0, 1 respectively
    private LeftCenterRight alignment;
    // How many digits to have after the decimal place, -1 implies no limit
    private int precision;
    // Show zeros when the decimal is shorter than precision?
    private boolean fixed;
    // Is a code block? Returns the string with "```" appended at the beginning and end
    private QuoteType quoteType;
    // Type of code used for highlighting
    private String codeType;
    // And our content
    private StringBuilder content;


    public CodeBlock() {
        nextWidth = 0;
        fill = ' ';
        alignment = LeftCenterRight.LEFT;
        precision = -1;
        fixed = false;
        quoteType = QuoteType.BLOCK;
        codeType = "";
        content = new StringBuilder();
    }

    public net.exploitables.audy.utilities.CodeBlock setW(int w) {
        this.nextWidth = w;
        return this;
    }

    public net.exploitables.audy.utilities.CodeBlock setFill(char c) {
        this.fill = c;
        return this;
    }

    public net.exploitables.audy.utilities.CodeBlock setPrecision(int p) {
        this.precision = p;
        return this;
    }

    public net.exploitables.audy.utilities.CodeBlock setFixed(boolean b) {
        this.fixed = b;
        return this;
    }

    public net.exploitables.audy.utilities.CodeBlock setAlignment(String side) {
        this.alignment = LeftCenterRight.valueOf(side);
        return this;
    }

    public net.exploitables.audy.utilities.CodeBlock setQuoteType(String s) {
        this.quoteType = QuoteType.valueOf(s);
        return this;
    }

    public net.exploitables.audy.utilities.CodeBlock setCodeType(String s) {
        this.codeType = s;
        return this;
    }

    // Insert however many number of the fill characters
    public net.exploitables.audy.utilities.CodeBlock appendFill(int num) {
        for (int i = 0; i < num; i++) {
            this.content.append(this.fill);
        }
        return this;
    }

    // Add a string to the content taking into account the NextFill and the alignment
    public net.exploitables.audy.utilities.CodeBlock append(String str) {
        int NumSpaces = this.nextWidth - str.length();
        if (NumSpaces < 0) NumSpaces = 0;
        if (this.alignment == LeftCenterRight.LEFT) {
            this.content.append(str);
            appendFill(NumSpaces);
        } else if (this.alignment == LeftCenterRight.CENTER) {
            int HalfSpaces = NumSpaces / 2;
            int TotalAdded = (HalfSpaces * 2) + str.length();
            appendFill(HalfSpaces);
            this.content.append(str);
            appendFill(HalfSpaces);
            if (TotalAdded < nextWidth) { // In case of integer division rounding down
                appendFill(nextWidth - TotalAdded);
            }
        } else if (this.alignment == LeftCenterRight.RIGHT) {
            appendFill(NumSpaces);
            this.content.append(str);
        }

        nextWidth = 0;
        return this;
    }

    // Add an integer to the content taking into account the NextFill and the alignment
    public net.exploitables.audy.utilities.CodeBlock append(int i) {
        return this.append(String.valueOf(i));
    }

    /*
     * All the code in this class is very old (first custom class I ever made!), the following have deprecated methods
     */

//    private String round(double d, int decimalPlace) {
//        BigDecimal bd = new BigDecimal(Double.toString(d));
//        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);
//        if (!this.fixed) {
//            return String.valueOf(bd.floatValue());
//        } else {
//            return bd.toString();
//        }
//    }
//
//    private String round(float f, int decimalPlace) {
//        BigDecimal bd = new BigDecimal(f);
//        bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP);
//        if (!this.fixed) {
//            return String.valueOf(bd.floatValue());
//        } else {
//            return bd.toString();
//        }
//    }

//    // Add a double to the content taking into account the NextFill, alignment, and the precision
//    public net.exploitables.audy.utilities.CodeBlock append(double d) {
//        String ToAppend = String.valueOf(d);
//        if (this.precision >= 0) { ToAppend = round(d, precision); }
//        return this.append(ToAppend);
//    }
//
//    // Add a float to the content taking into account the NextFill, alignment, and the precision
//    public net.exploitables.audy.utilities.CodeBlock append(float f) {
//        String ToAppend = String.valueOf(f);
//        if (this.precision >= 0) { ToAppend = round(f, precision); }
//        return this.append(ToAppend);
//    }

    // Add "true"/"false" to the content taking into account the NextFill and the alignment
    public net.exploitables.audy.utilities.CodeBlock append(boolean b) {
        return this.append(String.valueOf(b));
    }

    // Add a char to the content taking into account the NextFill and the alignment
    public net.exploitables.audy.utilities.CodeBlock append(char c) {
        return this.append(String.valueOf(c));
    }

    // Add a long to the content taking into account the NextFill and the alignment
    public net.exploitables.audy.utilities.CodeBlock append(long l) {
        return this.append(String.valueOf(l));
    }

    // Add a long to the content taking into account the NextFill and the alignment
    public net.exploitables.audy.utilities.CodeBlock append(byte b) {
        return this.append(String.valueOf(b));
    }

    public net.exploitables.audy.utilities.CodeBlock newLine() {
        this.content.append("\n");
        return this;
    }

    public net.exploitables.audy.utilities.CodeBlock tab() {
        this.content.append("\t");
        return this;
    }

    // Appends a title and content in a list style similar to a 2 by X table
    public net.exploitables.audy.utilities.CodeBlock listEntry(int Width, String Title, String Content) {
        this.nextWidth = Width;
        this.append(Title).append(": ").append(Content);
        return this;
    }

    // Similar to above but also formats a list in the content area
    public net.exploitables.audy.utilities.CodeBlock listEntry(int Width, String Title, List<String> Content) {
        this.nextWidth = Width;
        this.append(Title).append(": ");
        for (int i = 0; i < Content.size(); i++) {
            this.append(Content.get(i));
            if (i != Content.size() - 1) this.append(", ");
        }
        return this;
    }

    public String toString() {
        if (quoteType.equals(QuoteType.BLOCK)) {
            return "```" + codeType + "\n" + content.toString() + "```";
        } else if (quoteType.equals(QuoteType.SINGLE)) {
            return "`" + content.toString() + "`";
        } else {
            return content.toString();
        }
    }
}
