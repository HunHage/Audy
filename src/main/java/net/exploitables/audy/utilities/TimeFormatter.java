/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.utilities;

import discord4j.common.util.Snowflake;
import org.joda.time.*;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import java.time.Instant;

public class TimeFormatter {
    private static DateTimeFormatter dateTimeFormat = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss.SSS zzz");
    private static DateTimeFormatter dateTimeFormatFilename = DateTimeFormat.forPattern("yyyy-MM-dd HH-mm-ss-SSS zzz");

    // Format a snowflake into time
    public static String format(Snowflake snowflake) {
        return dateTimeFormat.print(snowflake.getTimestamp().toEpochMilli());
    }

    // Format an instant into time
    public static String format(Instant instant) {
        return dateTimeFormat.print(instant.toEpochMilli());
    }

    // Format a Joda DateTime
    public static String format(DateTime dateTime) { return dateTimeFormat.print(dateTime); }

    // Format a snowflake into UTC time
    public static String formatUTC(Snowflake snowflake) {
        return dateTimeFormat.print(new DateTime(snowflake.getTimestamp().toEpochMilli()).withZone(DateTimeZone.UTC));
    }

    // Format an instant into UTC time
    public static String formatUTC(Instant instant) {
        return dateTimeFormat.print(new DateTime(instant.toEpochMilli()).withZone(DateTimeZone.UTC));
    }

    public static String formatUTC(DateTime dateTime) {
        return dateTimeFormat.print(dateTime.withZone(DateTimeZone.UTC));
    }

    public static String formatNowUTC() {
        return dateTimeFormat.print(DateTime.now().withZone(DateTimeZone.UTC));
    }

    public static String formatNowFilenameUTC() {
        return dateTimeFormatFilename.print(DateTime.now().withZone(DateTimeZone.UTC)).replaceAll(" ", "_");
    }

    public static String formatSnowflakeAge(Instant instant) {
        // Add info on join date and account age
        DateTime today = DateTime.now();
        System.out.println(today.toDate().toString());
        DateTime created = org.joda.time.Instant.ofEpochMilli(instant.toEpochMilli()).toDateTime();
        int years, months, days, hours, minutes, seconds, totDays;
        totDays = Days.daysBetween(created, today).getDays();
        years   = Years.yearsBetween(created, today).getYears();
        created = created.plus(Years.years(years));
        months  = Months.monthsBetween(created, today).getMonths();
        created = created.plus(Months.months(months));
        days    = Days.daysBetween(created, today).getDays();
        created = created.plus(Days.days(days));
        hours   = Hours.hoursBetween(created, today).getHours();
        created = created.plus(Hours.hours(hours));
        minutes = Minutes.minutesBetween(created, today).getMinutes();
        //created = created.plus(Minutes.minutes(minutes));
        //seconds = Seconds.secondsBetween(created, today).getSeconds();

        return years +      "y " +
                months +    "m " +
                days +      "d " +
                hours +     "h " +
                minutes +   "m / " +
                //seconds + "s / "
                totDays +   "d";
    }
}
