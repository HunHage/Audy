/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.utilities;

import net.exploitables.audy.internal.ThrowableReport;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.regex.Pattern;

public class FileManager {
    private static Logger logger = LoggerFactory.getLogger(FileManager.class);
    // http://urlregex.com/
    // This has been modified to remove character 124 `|` from the regex due to it being used to mark spoilers
    // Additional groups have been added to the start/end for extra characters that may be placed around the
    //  url in order to prevent the URL from embedding
    // Capture Groups:
    //  1: preceding characters
    //  2: full url
    //  3: protocol (http/https/ftp/file)
    //  4: following characters
    public static final Pattern urlRegex = Pattern.compile("(.*)((https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_!:,.;]*[-a-zA-Z0-9+&@#/%=~_])(.*)");

    private static void writeFile(Path path, String content) throws IOException {
        logger.info("Writing file: " + path.toString());
        OutputStreamWriter output = new OutputStreamWriter(new FileOutputStream(path.toFile()), StandardCharsets.UTF_8);
        output.write(content);
        output.close();
    }

    public static void saveLog(String content) {
        try {
            // Create a filename and remove all non number/letter characters
            Path fileName = Paths.get("Logs", "Thrown", "Audy_" + TimeFormatter.formatNowFilenameUTC() + ".txt");
            writeFile(fileName, content);
        } catch (Exception e) {
            // Don't log exception as logging a file write error will likely be recursive
            StringBuilder stack = new StringBuilder();
            for (StackTraceElement ste : e.getStackTrace()) {
                stack.append(ste);
            }

            logger.error("Exception occurred while saving exception log to file!\n" +
                    "Log: " + content + "\n" +
                    "Couldn't be saved due to: " + e.getMessage() + "\n" +
                    stack.toString());
        }
    }

    /**
     * @param contentType the MIME type to check
     * @return true if the MIME is of audio, image, or video type
     */
    private static boolean isMedia(String contentType) {
        return contentType.startsWith("audio") || contentType.startsWith("image") || contentType.startsWith("video");
    }

    /**
     * Download a media file (audio, image, video MIME type) from the provided URL
     * @param url the URL to download
     * @return the file data as a byte array, errors are emitted through the Mono
     */
    public static Mono<byte[]> downloadMedia(String url) {
        return reactor.netty.http.client.HttpClient.create()
                .get()
                .uri(url)
                .responseSingle((res, body) -> body.asByteArray()
                        .filter(_b -> isMedia(res.responseHeaders().get("Content-Type"))))
                // Timeouts untested
                .timeout(Duration.ofSeconds(30))
                .doOnError(t -> new ThrowableReport(t).reportInternalException())
                .retry(2);
    }
}
