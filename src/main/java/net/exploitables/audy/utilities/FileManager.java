/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.utilities;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.stream.Collectors;

public class FileManager {
    private static Logger logger = LoggerFactory.getLogger(FileManager.class);

    private static String readFile(String path) throws IOException {
        logger.info("Reading file: " +  path);
        BufferedReader input = new BufferedReader(new InputStreamReader(new FileInputStream(path), StandardCharsets.UTF_8));
        String content = input.lines().collect(Collectors.joining());
        input.close();
        return content;
    }

    private static void writeFile(String path, String content) throws IOException {
        logger.info("Writing file: " + path);
        OutputStreamWriter output = new OutputStreamWriter(new FileOutputStream(path), StandardCharsets.UTF_8);
        output.write(content);
        output.close();
    }

    public static void saveLog(String content) {
        try {
            // Create a filename and remove all non number/letter characters
            String fileName = ("Logs\\Thrown\\Audy_" + TimeFormatter.formatNowFilenameUTC() + ".txt")
                    .replaceAll(" ", "_");
            writeFile(fileName, content);
        } catch (Exception e) {
            // Don't log exception as logging a file write error will likely be recursive
            StringBuilder stack = new StringBuilder();
            for (StackTraceElement ste : e.getStackTrace()) {
                stack.append(ste);
            }

            logger.error("Exception occurred while saving exception log to file!\n" +
                    "Log: " + content + "\n" +
                    "Couldn't be saved due to: " + e.getMessage() + "\n" +
                    stack.toString());
        }
    }
}
