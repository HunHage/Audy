/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.utilities;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class FileManager {
    private static Logger logger = LoggerFactory.getLogger(FileManager.class);
    // http://urlregex.com/
    // This has been modified to remove character 124 `|` from the regex due to it being used to mark spoilers
    // Additional groups have been added to the start/end for extra characters that may be placed around the
    //  url in order to prevent the URL from embedding
    // Capture Groups:
    //  1: preceding characters
    //  2: full url
    //  3: protocol (http/https/ftp/file)
    //  4: following characters
    public static final Pattern urlRegex = Pattern.compile("(.*)((https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_!:,.;]*[-a-zA-Z0-9+&@#/%=~_])(.*)");

    private static String readFile(String path) throws IOException {
        logger.info("Reading file: " +  path);
        BufferedReader input = new BufferedReader(new InputStreamReader(new FileInputStream(path), StandardCharsets.UTF_8));
        String content = input.lines().collect(Collectors.joining());
        input.close();
        return content;
    }

    private static void writeFile(String path, String content) throws IOException {
        logger.info("Writing file: " + path);
        OutputStreamWriter output = new OutputStreamWriter(new FileOutputStream(path), StandardCharsets.UTF_8);
        output.write(content);
        output.close();
    }

    public static void saveLog(String content) {
        try {
            // Create a filename and remove all non number/letter characters
            String fileName = ("Logs\\Thrown\\Audy_" + TimeFormatter.formatNowFilenameUTC() + ".txt")
                    .replaceAll(" ", "_");
            writeFile(fileName, content);
        } catch (Exception e) {
            // Don't log exception as logging a file write error will likely be recursive
            StringBuilder stack = new StringBuilder();
            for (StackTraceElement ste : e.getStackTrace()) {
                stack.append(ste);
            }

            logger.error("Exception occurred while saving exception log to file!\n" +
                    "Log: " + content + "\n" +
                    "Couldn't be saved due to: " + e.getMessage() + "\n" +
                    stack.toString());
        }
    }

    /**
     * Downloads the file at the given URL, be it a file or webpage.
     *
     * @param url target to download
     * @return A stream of data representing the file
     * @throws IOException on failure to download the file or no entity found
     */
    public static ByteArrayOutputStream downloadFile(String url) throws IOException {
        HttpClient client = HttpClientBuilder.create().build();
        HttpGet request = new HttpGet(url);
        request.addHeader("User-Agent", "Mozilla/5.0");
        HttpResponse response = client.execute(request);
        HttpEntity entity = response.getEntity();
        // TODO: Add file size limit "response.getLastHeader("Content-Length").getValue()"
        if (entity != null) { // We have an entity to save
            String contentType = entity.getContentType().getValue();
            // Only download media files
            if (contentType.startsWith("audio/")
                    || contentType.startsWith("image/")
                    || contentType.startsWith("video/")) {
                // Get the entity and store it in a ByteArrayStream
                BufferedInputStream bis = new BufferedInputStream(entity.getContent());
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                int inByte;
                while ((inByte = bis.read()) != -1) baos.write(inByte);
                bis.close();

                return baos;
            }
        } else {
            throw new IOException("no entity found at url");
        }

        return null;
    }
}
