/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicBoolean;

public class AudyConfigLoader {
    private static final Logger logger = LoggerFactory.getLogger(AudyConfigLoader.class);
    private static final String configFileName = "AudyConfig.properties";

    /**
     * Load the {@value configFileName} file if present and construct an {@link AudyConfig} instance to represent it.
     * This should only be called once before DiscordClient creation.
     *
     * If the config file doesn't exist it will be created with default values.
     * When loading the config file its integrity is checked for missing properties and repaired.
     *
     * @return a {@link AudyConfig} instance with values from the config file
     */
    static AudyConfig loadConfiguration() throws Exception {
        logger.info("Loading " + configFileName + " ...");
        Properties properties = new Properties();

        File configFile = new File(configFileName);
        if (configFile.exists()) { // File exists, read and verify it
            logger.debug(configFileName + " exists, parsing");
            FileInputStream fis = new FileInputStream(configFile);
            properties.load(fis);
        } else { // File doesn't exist, create and verify it
            logger.info(configFileName + " doesn't exist, creating");
        }
        verifyProperties(properties, configFile);

        logger.info(configFileName + " loaded");
        return new AudyConfig(properties);
    }

    /**
     * Verify that a properties file has all required entries
     * @param properties the Properties instance to verify
     * @param file the file to write to if the properties have been altered
     */
    private static void verifyProperties(Properties properties, File file) throws Exception {
        logger.info("Verifying " + configFileName);
        AtomicBoolean valueMissing = new AtomicBoolean(false);

        properties.computeIfAbsent("DefaultPrefix",     k -> { valueMissing.set(true); return "a-"; });
        properties.computeIfAbsent("TimeOffset",        k -> { valueMissing.set(true); return "-5"; });

        properties.computeIfAbsent("EmbedColorHex",     k -> { valueMissing.set(true); return "FF9900"; });
        properties.computeIfAbsent("EmojiCross",        k -> { valueMissing.set(true); return "\\u274C"; });
        properties.computeIfAbsent("EmojiCheck",        k -> { valueMissing.set(true); return "\\u2714"; });

        properties.computeIfAbsent("ReportChannelId",   k -> { valueMissing.set(true); return "0"; });

        properties.computeIfAbsent("SQLEnabled",        k -> { valueMissing.set(true); return "false"; });
        properties.computeIfAbsent("SQLUsername",       k -> { valueMissing.set(true); return ""; });
        properties.computeIfAbsent("SQLPassword",       k -> { valueMissing.set(true); return ""; });
        properties.computeIfAbsent("SQLDatabaseName",   k -> { valueMissing.set(true); return ""; });
        properties.computeIfAbsent("SQLServerAddress",  k -> { valueMissing.set(true); return ""; });
        properties.computeIfAbsent("SQLServerPort",     k -> { valueMissing.set(true); return ""; });

        if (valueMissing.get()) {
            logger.info(configFileName + " modified, writing changes ...");
            OutputStreamWriter output =
                    new OutputStreamWriter(new FileOutputStream(configFileName), StandardCharsets.UTF_8);
            // Oversight? Each time a value is missing from the properties file this will be added again
            properties.store(output, "These are global configuration values for Audy," +
                    " restart for changes to take effect.");
        }
    }


}
