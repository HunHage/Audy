/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.data.history;

import net.exploitables.audy.AudyDatabase;
import org.jdbi.v3.core.mapper.reflect.ConstructorMapper;

import java.beans.ConstructorProperties;
import java.time.Instant;
import java.util.Optional;

/**
 * A row representing a row of tbl_user_history_latest in SQL. This is the superclass of {@link ArchivedUserEntry} and
 *  as such not all fields are final.
 */
public class ArchivedUserLatest {
    /** Never null: The Discord Snowflake ID of the user this data pertains to. */
    final long userId;
    /** Never null: The time at which this data was created, for history table it indicates
     *  when a user changed their profile from the provided information. */
    long timestamp;
    /** Sometimes null: The username for the given point in time going forwards. */
    String username;
    /** Sometimes null: The discriminator for the given point in time going forwards. */
    String discriminator;
    /** Sometimes null: The MD5 checksum of the user's avatar which will be stored as an ArchivedFile in SQL */
    String avatarMD5;
    /** Sometimes null: The filename and extension of the user's avatar if avatarMD5 is present */
    String avatarName;

    /** Called when creating a new {@link ArchivedUserEntry} */
    ArchivedUserLatest(long userId) {
        this.userId = userId;
        this.timestamp = Instant.now().toEpochMilli();
        this.username = null;
        this.discriminator = null;
        this.avatarMD5 = null;
        this.avatarName = null;
    }

    /** Create a new Instance of this class with field data pre-generated from SQL or {@link ArchivedMessageFactory} */
    @ConstructorProperties({"user_id", "timestamp", "username", "discriminator", "avatar_md5", "avatar_name"})
    public ArchivedUserLatest(long userId,
                       long timestamp,
                       String username,
                       String discriminator,
                       String avatarMD5,
                       String avatarName) {
        this.userId = userId;
        this.timestamp = timestamp;
        this.username = username;
        this.discriminator = discriminator;
        this.avatarMD5 = avatarMD5;
        this.avatarName = avatarName;
    }

    /**
     * @return An {@link ArchivedFile} queried from SQL if present. Empty if not in SQL.
     */
    public Optional<ArchivedFile> getAvatarFile() {
        return AudyDatabase.getJdbi().withHandle(handle -> {
            handle.registerRowMapper(ConstructorMapper.factory(ArchivedFile.class));
            return handle.createQuery("SELECT * FROM tbl_files WHERE" +
                " pk_md5 = :pk_md5;")
                .bind("pk_md5", avatarMD5)
                .mapTo(ArchivedFile.class)
                .findOne();
        });
    }

    /**
     * Create a new row in SQL representing this data for the latest known user profile state.
     * All fields except for avatarMD5 and avatarName must be non-null.
     *
     * @return this instance
     * */
    ArchivedUserLatest createEntryNow() {
        AudyDatabase.getJdbi().useHandle(handle -> {
            handle.registerArrayType(String.class, "varchar");
            handle.createUpdate("INSERT INTO tbl_user_history_latest (" +
                " user_id," +
                " timestamp," +
                " username," +
                " discriminator," +
                " avatar_md5," +
                " avatar_name" +
                " ) VALUES (" +
                " :user_id," +
                " :timestamp," +
                " :username," +
                " :discriminator," +
                " :avatar_md5," +
                " :avatar_name" +
                ");")
                .bind("user_id", this.userId)
                .bind("timestamp", this.userId)
                .bind("username", this.username)
                .bind("discriminator", this.discriminator)
                .bind("avatar_md5", this.avatarMD5)
                .bind("avatar_name", this.avatarName)
                .execute();
        });

        return this;
    }

    /**
     * Update the row in SQL for the latest known data for this user's profile.
     * All fields except for avatarMD5 and avatarName must be non-null.
     *
     * @return this instance
     * */
    ArchivedUserLatest updateEntryNow() {
        AudyDatabase.getJdbi().useHandle(handle -> {
            handle.registerArrayType(String.class, "varchar");
            handle.createUpdate("UPDATE tbl_user_history_latest SET" +
                " username = :username," +
                " timestamp = :timestamp," +
                " discriminator = :discriminator," +
                " avatar_md5 = :avatar_md5," +
                " avatar_name = :avatar_name" +
                " WHERE" +
                " user_id = :user_id" +
                ";")
                .bind("user_id", this.userId)
                .bind("username", this.username)
                .bind("timestamp", this.userId)
                .bind("discriminator", this.discriminator)
                .bind("avatar_md5", this.avatarMD5)
                .bind("avatar_name", this.avatarName)
                .execute();
        });

        return this;
    }

    public long             getUserId()         { return userId; }
    public long             getTimestamp()      { return timestamp; }
    public Optional<String> getUsername()       { return Optional.ofNullable(username); }
    public Optional<String> getDiscriminator()  { return Optional.ofNullable(discriminator); }
    public Optional<String> getAvatarMD5()      { return Optional.ofNullable(avatarMD5); }
    public Optional<String> getAvatarName()     { return Optional.ofNullable(avatarName); }
}
