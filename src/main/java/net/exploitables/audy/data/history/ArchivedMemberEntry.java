package net.exploitables.audy.data.history;

import discord4j.core.object.entity.Member;
import net.exploitables.audy.AudyDatabase;

import java.beans.ConstructorProperties;

public class ArchivedMemberEntry extends ArchivedMemberLatest {
    /**
     * Used when creating data for a member with no previous data.
     * @param member the member to create an instance for
     */
    ArchivedMemberEntry(Member member) {
        super(member);
    }

    /**
     * Create a new instance with data retrieved from SQL.
     * @param userId the Snowflake ID of the user
     * @param guildId the Snowflake ID of the guild
     * @param timestamp the last time this data was updated
     * @param nickname the nickname the member currently has
     */
    @ConstructorProperties({"user_id", "guild_id", "timestamp", "nickname"})
    public ArchivedMemberEntry(long userId, long guildId, long timestamp, String nickname) {
        super(userId, guildId, timestamp, nickname);
    }
    /**
     * Create a new row in SQL representing this data
     * @return this instance
     */
    @Override
    ArchivedMemberLatest createNow() {
        AudyDatabase.getJdbi().useHandle(handle -> {
            handle.createUpdate("INSERT INTO tbl_member_history (" +
                " user_id," +
                " guild_id," +
                " timestamp," +
                " nickname" +
                ") VALUES (" +
                " :user_id," +
                " :guild_id," +
                " :timestamp," +
                " :nickname" +
                ");")
                .bind("user_id", this.userId)
                .bind("guild_id", this.guildId)
                .bind("timestamp", this.timestamp)
                .bind("nickname", this.nickname)
                .execute();
        });

        return this;
    }

    /**
     * Update this object in SQL immediately with a new timestamp and nickname
     * @return this instance
     */
    @Override
    ArchivedMemberLatest updateNow() {
        AudyDatabase.getJdbi().useHandle(handle -> {
            handle.createUpdate("UPDATE tbl_member_history SET" +
                " timestamp = :timestamp," +
                " nickname = :nickname" +
                " WHERE" +
                " user_id = :user_id," +
                " guild_id = :guild_id" +
                ";")
                .bind("user_id", this.userId)
                .bind("guild_id", this.guildId)
                .bind("timestamp", this.timestamp)
                .bind("nickname", this.nickname)
                .execute();
        });

        return this;
    }
}
