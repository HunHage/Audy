package net.exploitables.audy.data.history;

import net.exploitables.audy.AudyDatabase;
import org.jdbi.v3.core.mapper.reflect.ConstructorMapper;

import java.beans.ConstructorProperties;
import java.util.Optional;

public class ArchivedFile {
    /** Never null: An MD5 checksum of the file. */
    private String md5;
    /** Never null: Name of the file. Either as provided or "unknown". */
    private String name;
    /** Never null: Extension of the file. Either as provided, parsed from Mime types, or "unknown". */
    private String extension;
    /** Never null: Complete file data as a Byte Array. */
    private byte[] data;

    /** Create a new Instance of this class with field data pre-generated from SQL or {@link ArchivedMessageFactory} */
    @ConstructorProperties({"pk_md5", "name", "extension", "data_bytes"})
    public ArchivedFile(String md5, String name, String extension, byte[] data) {
        this.md5 = md5;
        this.name = name;
        this.extension = extension;
        this.data = data;
    }

    /**
     * @param md5 the MD5 checksum of the file to check for
     * @return true if a file with the given MD5 exists in the database, false otherwise.
     */
    public static boolean md5Exists(String md5) {
        return AudyDatabase.getJdbi().withHandle(handle -> {
            handle.registerRowMapper(ConstructorMapper.factory(ArchivedFile.class));
            return handle.createQuery("SELECT pk_md5 FROM tbl_files WHERE" +
                " pk_md5 = :pk_md5;")
                .bind("pk_md5", md5)
                .mapTo(String.class)
                .findOne()
                .isPresent();
        });
    }

    /**
     * Get an Archived File from SQL by it's MD5
     * @param md5 the MD5 of the file
     * @return a present optional of a representative {@link ArchivedFile} if available, empty otherwise
     */
    public static Optional<ArchivedFile> getByMD5(String md5) {
        return AudyDatabase.getJdbi().withHandle(handle -> {
            handle.registerRowMapper(ConstructorMapper.factory(ArchivedFile.class));
            return handle.createQuery("SELECT * FROM tbl_files WHERE" +
                " pk_md5 = :pk_md5;")
                .bind("pk_md5", md5)
                .mapTo(ArchivedFile.class)
                .findOne();
        });
    }

    /** Create a new row in SQL representing this data
     * @return this instance
     * */
    ArchivedFile createNow() {
        AudyDatabase.getJdbi().useHandle(handle -> {
            handle.createUpdate("INSERT INTO tbl_files (" +
                " pk_md5," +
                " name," +
                " extension," +
                " data_bytes" +
                " ) VALUES (" +
                " :md5," +
                " :name," +
                " :extension," +
                " :data" +
                ");")
                .bind("md5", this.md5)
                .bind("name", this.name)
                .bind("extension", this.extension)
                .bind("data", this.data)
                .execute();
        });

        return this;
    }

    public String getMD5()          { return md5; }
    public String getFullName()     { return name + "." + extension; }
    public String getFileName()     { return name; }
    public String getExtension()    { return extension; }
    public byte[] getData()         { return data; }
}
