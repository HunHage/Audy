/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.data;

import discord4j.rest.util.Permission;
import discord4j.rest.util.PermissionSet;
import net.exploitables.audy.internal.EnumFormattedName;

import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

public enum DiscordPermission implements EnumFormattedName {
    ADMINISTRATOR("administrator"),
    VIEW_AUDIT_LOG("view audit log"),
    MANAGE_GUILD("manage server"),
    MANAGE_ROLES("manage roles"),
    MANAGE_CHANNELS("manage channels"),
    KICK_MEMBERS("kick members"),
    BAN_MEMBERS("ban members"),
    //    CREATE_INSTANT_INVITE("create instant invites"),
//    CHANGE_NICKNAME("change nickname"),
    MANAGE_NICKNAMES("manage nicknames"),
    MANAGE_EMOJIS("manage emojis"),
    MANAGE_WEBHOOKS("manage webhooks"),
    //    VIEW_CHANNEL("read text channels & see voice channels"),
    SEND_MESSAGES("send messages"),
    SEND_TTS_MESSAGES("send tts messages"),
    MANAGE_MESSAGES("manage messages"),
    //    EMBED_LINKS("embed links"),
//    ATTACH_FILES("attach files"),
//    READ_MESSAGE_HISTORY("read message history"),
    MENTION_EVERYONE("mention everyone and here"),
    //    USE_EXTERNAL_EMOJIS("use external emojis"),
//    ADD_REACTIONS("add reactions"),
    //Voice/Video permissions
//    CONNECT("connect"),
//    SPEAK("speak"),
    MUTE_MEMBERS("mute members"),
    DEAFEN_MEMBERS("deafen members"),
    MOVE_MEMBERS("move members"),
    //    USE_VAD("use voice activity"),
    PRIORITY_SPEAKER("priority speaker");
//    STREAM("go live");


    /* -----=====[ METHODS ]=====----- */


    // Create a map to rapidly get values for the enum when converting from PermissionSet
    // There are 17 possible DiscordPermissions to map from PermissionSet which has 30 (2020-09-11)
    // If using a iterable list performance would be roughly O(N^1.5)
    private static final Map<String, DiscordPermission> nameMap = new HashMap<>();
    static {
        for (DiscordPermission permission : EnumSet.allOf(DiscordPermission.class)) {
            nameMap.put(permission.name(), permission);
        }
    }

    private final String formattedName;
    DiscordPermission(String name) {
        this.formattedName = name;
    }

    /**
     * Convert a D4J PermissionSet into an EnumSet of DiscordPermission, dropping missing permissions.
     * If the D4J PermissionSet contains the ADMINISTRATOR permission then the set will only contain that permission
     * @param dPermissions an EnumSet of D4J Discord permissions
     * @return a converted EnumSet with incompatible/redundant permissions dropped
     */
    public static EnumSet<DiscordPermission> ofPermissionSet(PermissionSet dPermissions) {
        if (dPermissions.contains(Permission.ADMINISTRATOR)) return EnumSet.of(ADMINISTRATOR);
        EnumSet<DiscordPermission> set = EnumSet.noneOf(DiscordPermission.class);
        dPermissions.forEach(dPerm -> {
            DiscordPermission perm = nameMap.get(dPerm.name());
            if (perm != null) {
                set.add(perm);
            }
        });

        return set;
    }

    public String getFormattedName() { return formattedName; }
}
