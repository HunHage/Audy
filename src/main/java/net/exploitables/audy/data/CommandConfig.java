/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.data;

import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Member;
import discord4j.rest.util.Permission;
import discord4j.rest.util.PermissionSet;
import net.exploitables.audy.AudyClient;
import net.exploitables.audy.commands.MessageCommand;
import net.exploitables.audy.commands.arguments.ArgumentSet;

import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import java.util.Optional;

/**
 * A simple container class for Command configuration. Constructed by {@link CommandConfigBuilder}.
 */
public class CommandConfig {
    private final MessageCommand command;
    private final Class<?> commandClass;
    private final List<Pair<String, String>> helpFields;
    private final EnumSet<DiscordPermission> botPermissions;
    private final EnumSet<DiscordPermission> memberPermissions;
    private final ArgumentSet argumentParser;

    /**
     * @param builder CommandConfigBuilder to create an immutable CommandConfig for.
     */
    CommandConfig(CommandConfigBuilder builder) {
        this.command = builder.command;
        this.commandClass = builder.commandClass;
        this.helpFields = builder.helpFields;
        this.botPermissions = builder.botPermissions;
        this.memberPermissions = builder.memberPermissions;
        this.argumentParser = builder.argumentParser;
    }

    /**
     * Determine if the Bot is missing any permissions from the provided D4J {@link PermissionSet} obtained
     *
     * @param guild the guild where the command is being called
     * @return An {@link EnumSet <DiscordPermission>} of the missing permissions. If the Bot has all permissions
     *  required then the EnumSet will be empty.
     */
    public final EnumSet<DiscordPermission> getMissingBotPermissions(Guild guild) {
        PermissionSet dPermissions = guild
            .getMemberById(AudyClient.getClient().getSelfId())
            .flatMap(Member::getBasePermissions)
            .blockOptional()
            .orElse(PermissionSet.none());
        if (dPermissions.contains(Permission.ADMINISTRATOR)) return EnumSet.noneOf(DiscordPermission.class);
        // Convert D4J PermissionSet to DiscordPermissions
        EnumSet<DiscordPermission> permissionSet = DiscordPermission.ofPermissionSet(dPermissions);
        // Clone the required permission EnumSet
        EnumSet<DiscordPermission> missingPermissions = this.botPermissions.clone();
        // Remove present permissions from the required set
        missingPermissions.removeAll(new ArrayList<>(permissionSet));
        // Only the missing required permissions remain.
        return missingPermissions;
    }

    /**
     * Determine if the Calling Member is missing any permissions from the provided D4J {@link PermissionSet}
     *
     * @param dPermissions D4J {@link PermissionSet} of a Member or custom source.
     * @return An {@link EnumSet <DiscordPermission>} of the missing permissions. If the Member has all permissions
     *  required then the EnumSet will be empty.
     */
    public final EnumSet<DiscordPermission> getMissingMemberPermissions(PermissionSet dPermissions) {
        if (dPermissions == null) return this.memberPermissions;
        if (dPermissions.contains(Permission.ADMINISTRATOR)) return EnumSet.noneOf(DiscordPermission.class);
        EnumSet<DiscordPermission> permissionSet = DiscordPermission.ofPermissionSet(dPermissions);
        EnumSet<DiscordPermission> missingPermissions = this.memberPermissions.clone();
        missingPermissions.removeAll(new ArrayList<>(permissionSet));

        return missingPermissions;
    }

    /**
     * @return The command method to execute this command.
     */
    public final MessageCommand getCommand() {
        return command;
    }

    /**
     * @return The class which contains the method used for command.
     */
    public final Class<?> getCommandClass() { return commandClass; }

    /**
     * @return List of (Title, Description) for embeds when generating help for the command.
     */
    public final List<Pair<String, String>> getHelpFields() {
        return helpFields;
    }

    /**
     * @return EnumSet of permissions the Bot must have to execute the command.
     */
    public final EnumSet<DiscordPermission> getBotPermissions() {
        return botPermissions;
    }

    /**
     * @return EnumSet of permissions the Calling User must have to execute the command.
     */
    public final EnumSet<DiscordPermission> getMemberPermissions() {
        return memberPermissions;
    }

    /**
     * @return The {@link ArgumentSet} set for the command to parse arguments for a command.
     */
    public final Optional<ArgumentSet> getArgumentParser() { return Optional.ofNullable(argumentParser); }
}
