/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.data;

import net.exploitables.audy.commands.arguments.ArgumentParser;
import net.exploitables.audy.commands.guild.GuildCommand;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;

/**
 * A Builder class for {@link CommandConfig}
 */
public class CommandConfigBuilder {
    private static final Logger logger = LoggerFactory.getLogger(CommandConfigBuilder.class);

    final GuildCommand command;
    final Class<?> commandClass;
    List<Pair<String, String>> helpFields;
    EnumSet<DiscordPermission> botPermissions;
    EnumSet<DiscordPermission> memberPermissions;
    ArgumentParser argumentParser;

    /**
     * Initialize a new builder with defaults, the command and key should always be immediately known and unchanged.
     * @param command The method to call when executing this command.
     * @param commandClass The class which contains the command method used for this command.
     */
    public CommandConfigBuilder(GuildCommand command, Class<?> commandClass) {
        this.command = command;
        this.commandClass = commandClass;
        logger.debug("Creating new CommandConfigBuilder with key `" + commandClass.getName() + "`");
        this.helpFields = new ArrayList<>();
        // Bot needs permission to reply to commands by sending messages
        this.botPermissions = EnumSet.of(DiscordPermission.SEND_MESSAGES);
        // Members don't always need permissions to execute commands
        this.memberPermissions = EnumSet.noneOf(DiscordPermission.class);
        // Set the argument parser to null as not all commands require arguments
        this.argumentParser = null;
    }

    /**
     * Add a new help section for the command, consisting of a paired title and description.
     * The pattern `%p` will be replaced with the guild prefix when printed.
     *
     * @param title Title of the help section, will have the server prefix followed by a space pre-pended to it.
     * @param description Description of the help section, limited to 1024 characters for Discord Embeds.
     * @return The instance modified.
     */
    public CommandConfigBuilder addHelp(String title, String description) {
        logger.debug("Command `" + this.commandClass.getName() + "`: Adding new help section with title `"
                + title + "` and description `" + description + "`" + "`");
        this.helpFields.add(new Pair<>(title, description));
        return this;
    }

    /**
     * Add a permission the Bot will require to execute the command. Permissions are checked at command call.
     *
     * @param permission The {@link DiscordPermission} to add to the required Bot permissions set.
     * @return The instance modified.
     */
    public CommandConfigBuilder addBotPermission(DiscordPermission permission) {
        logger.debug("Command `" + this.commandClass.getName() + "`: Adding required Bot permission `" + permission.name() + "`");
        this.botPermissions.add(permission);
        return this;
    }

    /**
     * Add a permission the calling Member must have to execute the command. Permissions are checked at command call.
     *
     * @param permission The {@link DiscordPermission} to add to the required member permissions set.
     * @return The instance modified.
     */
    public CommandConfigBuilder addMemberPermission(DiscordPermission permission) {
        logger.debug("Command `" + this.commandClass.getName() + "`: Adding required Member permission `" + permission.name() + "`");
        this.memberPermissions.add(permission);
        return this;
    }

    /**
     * Set the argument parser used by this command, called when the command has arguments.
     * @param argumentParser a class implementing {@link ArgumentParser} customized for this command
     * @return The instance modified.
     */
    public CommandConfigBuilder setArgumentParser(ArgumentParser argumentParser) {
        logger.debug("Command `" + this.commandClass.getName() + "`: Setting ArgumentParser to `" + argumentParser.getClass().getCanonicalName() + "`");
        this.argumentParser = argumentParser;
        return this;
    }

    /**
     * @return a new immutable {@link CommandConfig} instance based this builder. This should only be called once.
     */
    public CommandConfig build() {
        return new CommandConfig(this);
    }
}
