/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.data.entity;

import discord4j.core.object.entity.User;
import net.exploitables.audy.AudyDatabase;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;

import java.beans.ConstructorProperties;

/**
 * A Class which represents a row in SQL for tbl_user_config which contains configuration settings for a user.
 */
public class UserConfig {
    private static Logger logger = LoggerFactory.getLogger(UserConfig.class);

    /** Never null: The Discord Snowflake ID of the User. */
    private final long userId;
    /** Sometimes null: The timezone of the User as specified by the User. null when not set. */
    private String timezone;

    /**
     * Create a new instance of this class for the specified {@link User}. This does not save data to SQL.
     *
     * @param user the {@link User} to create new Configuration data for.
     */
    UserConfig(User user) {
        logger.debug("Creating new UserConfig for " + user.getId().asString());
        this.userId = user.getId().asLong();
        timezone = null;
    }

    /**
     * Create a new instance of this class with data retrieved from SQL.
     * @param userId the Snowflake ID of the user
     * @param timezone the user specified timezone
     */
    @ConstructorProperties({"pk_user_id", "timezone"})
    public UserConfig(long userId, String timezone) {
        this.userId = userId;
        this.timezone = timezone;
    }

    /**
     * Create a new {@link UserConfig} for the provided guild and insert a row into the SQL database.
     * Should only be called when no entry for this guild exists.
     *
     * @return this instance within a mono, all errors are emitted through the mono
     */
    Mono<UserConfig> create() {
        try {
            logger.debug("Creating UserConfig for: " + this.userId + " ...");
            AudyDatabase.getJdbi().useHandle(handle ->
                handle.createUpdate("INSERT INTO tbl_user_config (" +
                    " pk_user_id," +
                    " timezone" +
                    " ) VALUES (" +
                    " :pk_user_id," +
                    " :timezone" +
                    ");")
                    .bind("pk_user_id", this.userId)
                    .bind("timezone", this.timezone)
                    .execute());
            return Mono.justOrEmpty(this);
        } catch (Exception e) {
            return Mono.error(e);
        }
    }

    /**
     * Save this instance's data to SQL now.
     */
    public Mono<UserConfig> save() {
        try {
            logger.debug("Updating UserConfig for: " + this.userId + " ...");
            AudyDatabase.getJdbi().useHandle(handle ->
                handle.createUpdate("UPDATE tbl_user_config" +
                    " SET" +
                    " timezone = :timezone" +
                    " WHERE" +
                    " pk_user_id = :pk_user_id")
                    .bind("timezone", timezone)
                    .bind("pk_user_id", this.userId)
                    .execute());
            return Mono.just(this);
        } catch (Exception e) {
            return Mono.error(e);
        }
    }

    public UserConfig setTimeZone(String timezone) {
        this.timezone = timezone;
        return this;
    }

    public long   getUserId()   { return userId; }
    public String getTimeZone() { return timezone; }
}
