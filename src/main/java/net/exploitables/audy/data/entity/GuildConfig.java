/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.data.entity;

import discord4j.common.util.Snowflake;
import discord4j.core.object.entity.Guild;
import net.exploitables.audy.AudyDatabase;
import org.jdbi.v3.core.mapper.RowMapperFactory;
import org.jdbi.v3.core.mapper.reflect.ConstructorMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;

import java.beans.ConstructorProperties;
import java.util.Optional;

/**
 * Stored configuration settings for a guild.
 */
public class GuildConfig {
    private static final Logger logger = LoggerFactory.getLogger(GuildConfig.class);
    private static final RowMapperFactory mapper = ConstructorMapper.factory(GuildConfig.class);


    /** Never null: The Discord Snowflake ID of the guild*/
    private final Snowflake guildId;

    /** Never null: If this guild has been joined already. {@link discord4j.core.event.domain.guild.GuildCreateEvent}
     *  is sent any time that we either join or reconnect to a guild. */
    private boolean joined;
    /** Sometimes null: The custom prefix for the guild if set, null when there is no custom prefix and the default
     *  prefix should be used instead. */
    private String prefix;

    /**
     * Create a new GuildConfig instance for a newly joined guild, or when not data exists yet.
     * @param guild the guild for this class to represent
     */
    GuildConfig(Guild guild) {
        this.guildId = guild.getId();
        this.joined = false;
        this.prefix = null;
    }

    /**
     * Create a new GuildConfig for an existing guild, all arguments represent a column.
     */
    @ConstructorProperties({"pk_guild_id", "joined", "prefix"})
    public GuildConfig(long guildId, boolean joined, String prefix) {
        this.guildId = Snowflake.of(guildId);
        this.joined = joined;
        this.prefix = prefix;
    }

    /**
     * @param guild the guild to get saved configuration for
     * @return a GuildConfig instance representing data currently saved in SQL, created if needed
     *  errors are emitted through the mono
     */
    public static Mono<GuildConfig> getGuildConfig(Guild guild) {
        try {
            logger.debug("Loading GuildConfig for ID:" + guild.getId().asLong() + " ...");
            Optional<GuildConfig> sqlData = AudyDatabase.getJdbi().withHandle(handle -> {
                handle.registerRowMapper(mapper);
                return handle.createQuery("SELECT * FROM tbl_guild_config WHERE pk_guild_id = :pk_guild_id")
                    .bind("pk_guild_id", guild.getId().asLong())
                    .mapTo(GuildConfig.class)
                    .findOne();
            });

            if (sqlData.isPresent()) {
                logger.debug("GuildConfig for ID:" + guild.getId().asLong() + " retrieved.");
                return Mono.justOrEmpty(sqlData);
            } else {
                return createNow(guild);
            }
        } catch (Exception e) {
            return Mono.error(e);
        }
    }

    /**
     * Create a new {@link GuildConfig} for the provided guild and insert a row into the SQL database.
     * Should only be called when no entry for this guild exists.
     *
     * @param guild guild to create data for
     * @return a {@link GuildConfig} for the guild, otherwise an error is emitted through the mono
     */
    private static Mono<GuildConfig> createNow(Guild guild) {
        try {
            logger.debug("Creating GuildConfig for ID:" + guild.getId().asLong() + " ...");
            GuildConfig guildConfig = new GuildConfig(guild);
            AudyDatabase.getJdbi().useHandle(handle ->
                handle.createUpdate("INSERT INTO tbl_guild_config (" +
                    " pk_guild_id," +
                    " joined," +
                    " prefix" +
                    " ) VALUES (" +
                    " :pk_guild_id," +
                    " :joined," +
                    " :prefix" +
                    ");")
                    .bind("pk_guild_id", guildConfig.getGuildId().asLong())
                    .bind("joined", guildConfig.hasJoined())
                    .bind("prefix", guildConfig.getPrefix())
                    .execute());
            logger.debug("Created GuildConfig for ID:" + guild.getId().asLong());
            return Mono.justOrEmpty(guildConfig);
        } catch (Exception e) {
            return Mono.error(e);
        }
    }

    /**
     * Save the provided {@link GuildConfig} to the SQL database.
     * @param config the {@link GuildConfig} to save all properties of
     * @return the provided {@link GuildConfig} on completion
     */
    public static Mono<GuildConfig> saveNow(GuildConfig config) {
        try {
            AudyDatabase.getJdbi().useHandle(handle ->
                handle.createUpdate("UPDATE tbl_guild_config" +
                    " SET" +
                    " joined = :joined," +
                    " prefix = :prefix" +
                    " WHERE" +
                    " pk_guild_id = :pk_guild_id")
                    .bind("joined", config.joined)
                    .bind("prefix", config.prefix)
                    .bind("pk_guild_id", config.guildId.asLong())
                    .execute());
            return Mono.just(config);
        } catch (Exception e) {
            return Mono.error(e);
        }
    }

    public Snowflake    getGuildId()    { return guildId; }
    public boolean      hasJoined()     { return joined; }
    public String       getPrefix()     { return prefix; }

    public void setJoined()             { joined = true; }
    public void setPrefix(String s)     { prefix = s; }
}
