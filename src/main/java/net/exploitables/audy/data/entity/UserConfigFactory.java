/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.data.entity;

import discord4j.core.object.entity.User;
import net.exploitables.audy.AudyDatabase;
import org.jdbi.v3.core.mapper.RowMapperFactory;
import org.jdbi.v3.core.mapper.reflect.ConstructorMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import reactor.core.publisher.Mono;

import java.util.Optional;

public class UserConfigFactory {
    private static Logger logger = LoggerFactory.getLogger(UserConfigFactory.class);
    private static final RowMapperFactory mapper = ConstructorMapper.factory(UserConfig.class);

    /**
     * @param userId the Snowflake ID of the {@link User} to get SQL config data for
     * @return a {@link UserConfig} instance representing data currently saved in SQL,
     *                              errors are emitted through the mono
     */
    public static Mono<UserConfig> getUserConfig(long userId) {
        try {
            logger.debug("Loading UserConfig for ID:" + userId + " ...");
            Optional<UserConfig> sqlData = AudyDatabase.getJdbi().withHandle(handle -> {
                handle.registerRowMapper(mapper);
                return handle.createQuery("SELECT * FROM tbl_user_config WHERE pk_user_id = :pk_user_id")
                    .bind("pk_user_id", userId)
                    .mapTo(UserConfig.class)
                    .findOne();
            });

            return Mono.justOrEmpty(sqlData);
        } catch (Exception e) {
            return Mono.error(e);
        }
    }

    /**
     * @param user the {@link User} to get or create SQL config data for
     * @return a {@link UserConfig} instance representing data currently saved in SQL, created if needed,
     *                              errors are emitted through the mono
     */
    public static Mono<UserConfig> getOrCreateUserConfig(User user) {
        return getUserConfig(user.getId().asLong())
            .switchIfEmpty(Mono.just(new UserConfig(user)).flatMap(UserConfig::create));
    }
}
