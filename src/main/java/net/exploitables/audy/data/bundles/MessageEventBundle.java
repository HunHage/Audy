/*
 * This file is a part of https://github.com/HunHage/Audy, also known as Audy
 *
 * Audy is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to
 * Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
 *
 * Audy is provided without any warranty, including any implied warranty.
 */

package net.exploitables.audy.data.bundles;

import discord4j.common.util.Snowflake;
import discord4j.core.event.domain.message.MessageCreateEvent;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.User;
import discord4j.core.object.entity.channel.MessageChannel;
import net.exploitables.audy.commands.CommandResponse;
import net.exploitables.audy.internal.ArgsList;
import net.exploitables.audy.internal.tree.CommandTreeNode;

import java.util.Optional;

/**
 * A "bundle" of data related to MessageCreateEvent which aids in the command lifecycle.
 */
public class MessageEventBundle {
    // Entities
    final MessageCreateEvent event;
    final Message message;
    final MessageChannel channel;
    final User author;

    // Entity IDs
    final Snowflake messageId;
    final Snowflake channelId;
    final Snowflake authorId;

    // Command
    final CommandTreeNode commandNode;
    final ArgsList<String> args;
    final CommandResponse response;

    /**
     * Create a new MessageEventBundle from a received MessageCreateEvent and a parsed ArgsList
     * @param event event that caused the creation of this bundle
     * @param args parsed content of the message as an ArgsList
     */
    public MessageEventBundle(MessageCreateEvent event,
                              User author,
                              ArgsList<String> args,
                              CommandTreeNode commandNode) {

        this.event = event;
        this.message = event.getMessage();
        this.channel = message.getChannel().block();
        this.author = author;

        this.messageId = message.getId();
        this.channelId = message.getChannelId();
        this.authorId = author.getId();

        this.commandNode = commandNode;
        this.args = args;
        this.response = new CommandResponse();
    }

    public final MessageCreateEvent getEvent()            { return event; }
    public final Message getMessage()                     { return message; }
    public final Optional<MessageChannel> getChannel()    { return Optional.ofNullable(this.channel); }
    public final User getAuthor()                         { return this.author; }

    public final Snowflake getMessageId()                 { return this.messageId; }
    public final Snowflake getChannelId()                 { return this.channelId; }
    public final Optional<Snowflake> getAuthorId()        { return Optional.ofNullable(this.authorId); }

    public final CommandTreeNode getCommandNode()         { return this.commandNode; }
    public final ArgsList<String> getArgs()               { return args; }
    public final CommandResponse getResponse()            { return response; }
}
